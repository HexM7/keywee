{"version":3,"file":"index.cjs","sources":["../src/array/arrFilter/arrFilter.ts","../src/array/arrIndex/arrIndex.ts","../src/array/arrCross/arrCross.ts","../src/array/arrDiff/arrDiff.ts","../src/array/arrMap/arrMap.ts","../src/array/arrUnion/arrUnion.ts","../src/object/hasKey/hasKey.ts","../src/object/objKeys/objKeys.ts","../src/object/objEqual/objEqual.ts","../src/object/objDiff/objDiff.ts","../src/object/objFlush/objFlush.ts","../src/object/objPick/objPick.ts","../src/string/snakeCase/snakeCase.ts","../src/string/strTrim/strTrim.ts","../src/object/objSanitize/objSanitize.ts","../src/object/objSort/objSort.ts","../src/object/objValues/objValues.ts"],"sourcesContent":["/**\n *  Returns a new array with the elements from the given array that pass the test implemented by the provided function.\n * @example\n * ```ts\n * arrFilter(\n *   [1, 2, 3, 4, 5],\n *   function(element) {\n *     return element % 2 === 0;\n *   },\n * );\n *\n * => [2, 4]\n * ```\n * @param {Array} arr An array.\n * @param {Function} func Function that returns a boolean value.\n * @param {*} [thisArg] Value to use as `this` when executing function.\n *\n * @returns {Array} A new array with the elements that passed the test implemented by the function.\n */\nexport default function arrFilter(\n  arr: any[],\n  func: (element: typeof arr[any], index: number, array: typeof arr) => boolean,\n  thisArg?: any,\n): Partial<typeof arr> {\n  var obj = Object(arr);\n  var len = obj.length >>> 0;\n  var res: Partial<typeof arr> = [];\n\n  for (var i = 0; i < len; i++) {\n    if (i in obj) {\n      var val = obj[i];\n      if (func.call(thisArg, val, i, obj)) res.push(val);\n    }\n  }\n\n  return res;\n}\n","/**\n * Returns the first index at which a given element can be found in the array, or -1 if it is not present.\n * @example\n * ```ts\n * arrIndex([1, 2, 3, 4, 5], 4);\n *\n * => 3\n * ```\n * @param {Array} arr An array.\n * @param {*} element The element to search for.\n * @param {Number} [from] The index to start the search at.\n *\n * @returns {Number} The index of the element in the array.\n */\nexport default function arrIndex(\n  arr: any[],\n  element: typeof arr[any],\n  from?: number,\n): number {\n  var len = arr.length >>> 0;\n\n  var fromIndex = Number(from) || 0;\n  fromIndex = fromIndex < 0 ? Math.ceil(fromIndex) : Math.floor(fromIndex);\n  if (fromIndex < 0) fromIndex += len;\n\n  for (; fromIndex < len; fromIndex++) {\n    if (fromIndex in arr && arr[fromIndex] === element) return fromIndex;\n  }\n  return -1;\n}\n","import { arrFilter } from '../arrFilter';\nimport { arrIndex } from '../arrIndex';\n\n/**\n * Returns common elements from the both the arrays.\n * @example\n * ```ts\n * arrCross([1, 2, 3, 4], [2, 3]);\n *\n * => [2, 3]\n * ```\n *\n * @param {Array} arr An array.\n * @param {Array} relArr Another array.\n *\n * @returns {Array} Intersecting elements of the arrays.\n */\nexport default function arrCross(arr: any[], relArr: any[]): any[] {\n  return arrFilter(arr, function (element) {\n    return arrIndex(relArr, element) !== -1;\n  });\n}\n","import { arrFilter } from '../arrFilter';\nimport { arrIndex } from '../arrIndex';\n\n/**\n * Returns distinct elements from the first array that are not present in the second array.\n * @example\n * ```ts\n * arrDiff([1, 2, 3, 4], [2, 3]);\n *\n * => [1, 4]\n * ```\n *\n * @param {Array} arr An array.\n * @param {Array} relArr Another array.\n *\n * @returns {Array} Distinct elements from the first array that are not present in the second array.\n */\nexport default function arrDiff(arr: any[], relArr: any[]): any[] {\n  return arrFilter(arr, function (element) {\n    return arrIndex(relArr, element) === -1;\n  });\n}\n","/**\n * Creates a new array populated with the results of calling a provided function on every element in the calling array.\n * @example\n * ```ts\n * arrMap([1, 2, 3], function(element) {\n *   return element * 2;\n * });\n *\n * => [2, 4, 6]\n * ```\n * @param {Array} arr An array.\n * @param {Function} func Function that returns a value.\n * @param {*} [thisArg] Value to use as `this` when executing function.\n *\n * @returns {Array} A new array with the elements produced by the function.\n */\nexport default function arrMap(\n  arr: any[],\n  func: (element: typeof arr[any], index: number, array: typeof arr) => any,\n  thisArg?: any,\n): Partial<typeof arr> {\n  var array = [];\n\n  for (var i = 0; i < arr.length; i++) {\n    array.push(func.call(thisArg, arr[i], i, arr));\n  }\n\n  return array;\n}\n","import { arrDiff } from '../arrDiff';\n\n/**\n * Clones distinct elements from the second array to the first array.\n * @example\n * ```ts\n * arrUnion([1, 2, 3, 4, 5], [1, 3, 5, 7]);\n *\n * => [1, 2, 3, 4, 5, 7]\n * ```\n * @param {Array} arr An array.\n * @param {Array} relArr Another array.\n *\n * @returns {Array} Union of both the arrays.\n */\nexport default function arrUnion(arr: any[], relArr: any[]): any[] {\n  return arr.concat(arrDiff(relArr, arr));\n}\n","/**\n * Check if object has a specific key or an array of keys.\n * @example\n * ```ts\n * const obj = {\n *   \"foo\": true,\n *   \"bar\": false\n * };\n *\n * hasKey(obj, 'foo');\n * => true\n *\n * hasKey(obj, ['foo', 'bar']);\n * => true\n * ```\n * @param {Object} obj Source object.\n * @param {any|any[]} keys The key or array of keys to check.\n *\n * @returns {Boolean} Result.\n */\nexport default function hasKey<\n  Type extends Record<any, any>,\n  Key extends keyof Type,\n>(obj: Type, keys: Key | Key[]): boolean {\n  var hasKeys = true;\n\n  if (Array.isArray(keys)) {\n    var i = keys.length;\n    while (i--) {\n      if (!hasKey(obj, keys[i] as Key)) {\n        hasKeys = false;\n        break;\n      }\n    }\n  } else {\n    if (!Object.prototype.hasOwnProperty.call(obj, keys)) {\n      hasKeys = false;\n    }\n  }\n\n  return hasKeys;\n}\n","import { hasKey } from '../hasKey';\n\n/**\n * Returns an array of keys of an object.\n * @example\n * ```ts\n * const obj = {\n *   \"foo\": true,\n *   \"bar\": false,\n * };\n *\n * objKeys(obj);\n * => ['foo', 'bar']\n * ```\n * @param {Object} obj Source object.\n *\n * @returns {Array} Keys of the object.\n */\nexport default function objKeys<Type extends Record<any, any>>(\n  obj: Type,\n): Array<keyof Type> {\n  var keys: Array<keyof Type> = [];\n\n  for (var key in obj) {\n    if (hasKey(obj, key)) {\n      keys.push(key);\n    }\n  }\n\n  return keys;\n}\n","import { objKeys } from '../objKeys';\n\n/**\n * Compares two objects for equality.\n * @example\n * ```ts\n * objEqual({ foo: 1, bar: 2 }, { foo: 1, bar: 2 });\n * => true\n *\n * objEqual({ foo: 1, bar: 2 }, { foo: 1, bar: false });\n * => false\n * ```\n * @param {Object} obj First object.\n * @param {Object} relObj Second object.\n *\n * @returns {Boolean} A boolean value indicating the similar nature of the two objects.\n */\nexport default function objEqual<Type extends Record<any, any>>(\n  obj: Type,\n  relObj: Type,\n): boolean {\n  if (\n    typeof obj == 'object' &&\n    obj != null &&\n    typeof relObj == 'object' &&\n    relObj != null\n  ) {\n    if (objKeys(obj).length - objKeys(relObj).length !== 0) {\n      return false;\n    }\n\n    for (var objKey in obj) {\n      if (!(objKey in relObj) || !objEqual(obj[objKey], relObj[objKey])) {\n        return false;\n      }\n    }\n\n    for (var relObjKey in relObj) {\n      if (!(relObjKey in obj) || !objEqual(relObj[relObjKey], obj[relObjKey])) {\n        return false;\n      }\n    }\n\n    return true;\n  } else {\n    return obj === relObj;\n  }\n}\n","import { hasKey } from '../hasKey';\nimport { objEqual } from '../objEqual';\nimport { objKeys } from '../objKeys';\n\n/**\n * Returns an array of similar keys having different values along the two given objects.\n * @example\n * ```ts\n * objDiff({ foo: 1, bar: 2 }, { foo: true, bar: 2 });\n * => ['foo']\n *\n * objDiff({ foo: 1, bar: 2 }, { foo: 1, bar: 2 });\n * => false\n * ```\n * @param {Object} obj First object.\n * @param {Object} relObj Second object.\n *\n * @returns {Array|Boolean} Array of modified keys or false if the two objects are intact.\n */\nexport default function objDiff<\n  Type extends Record<any, any>,\n  Key extends keyof Type,\n>(obj: Type, relObj: Type): Key[] | false {\n  if (objEqual(obj, relObj)) {\n    return false;\n  }\n\n  var keys = objKeys(obj);\n  var modifiedKeys: Key[] = [];\n  var i = keys.length;\n\n  while (i--) {\n    if (hasKey(relObj, keys[i]) && !objEqual(obj[keys[i]], relObj[keys[i]])) {\n      modifiedKeys.push(keys[i] as Key);\n    }\n  }\n\n  return modifiedKeys.length ? modifiedKeys : false;\n}\n","import { hasKey } from '../hasKey';\n\n/**\n * Deletes a key, an arrays of keys or all keys from an object.\n * @example\n * ```ts\n * const obj = {\n *   \"foo\": true,\n *   \"bar\": false,\n *   \"one\": 2\n * };\n *\n * objFlush(obj, 'foo');\n * =>\n * {\n *   \"bar\": false,\n *   \"one\": 2\n * }\n *\n * objFlush(obj, ['foo', 'bar']);\n * => {\n *   \"one\": 2\n * }\n *\n * objFlush(obj);\n * => {}\n * ```\n * @param {Object} obj Source object.\n * @param {any|any[]} [keys] The key or an array of keys to remove.\n *\n * @returns {Boolean} Resultant object.\n */\nexport default function objFlush<\n  Type extends Record<any, any>,\n  Key extends keyof Type,\n>(obj: Type, keys?: Key | Key[]): Partial<Type> {\n  if (!keys) {\n    for (var key in obj) {\n      if (hasKey(obj, key)) {\n        delete obj[key];\n      }\n    }\n  } else if (Array.isArray(keys)) {\n    var i = keys.length;\n    while (i--) {\n      if (hasKey(obj, keys[i])) {\n        delete obj[keys[i]];\n      }\n    }\n  } else if (hasKey(obj, keys)) {\n    delete obj[keys];\n  }\n\n  return obj;\n}\n","import { hasKey } from '../hasKey';\n\n/**\n * Pick specific keys from an object.\n * @example\n * ```ts\n * const obj = {\n *   \"one\": true,\n *   \"two\": false,\n *   \"foo\": \"bar\"\n * };\n *\n * objPick(obj, ['two', 'foo']);\n *\n * =>\n * {\n *   \"two\": false,\n *   \"foo\": \"bar\"\n * }\n * ```\n *\n * @typedef {Object} Options\n * @property {Boolean} [upsert=false] Create new properties for missing keys.\n * @property {any} [defaultValue] Default value to use for upsert.\n *\n * @param {Object} obj Source object.\n * @param {any[]} keys Array of keys to objPick.\n * @param {Options} options Object objPick options.\n *\n * @returns {Object} Object with specified keys.\n */\nexport default function objPick<\n  Type extends Record<any, any>,\n  Key extends keyof Type,\n>(\n  obj: Type,\n  keys: Key[] | string[],\n  options?: {\n    defaultValue?: any;\n    upsert?: boolean;\n  },\n): Record<typeof keys[any], typeof obj[keyof typeof obj]> {\n  var defaultValue = (options || {}).defaultValue;\n  var upsert = (options || {}).upsert;\n  var newObj: Record<any, any> = {};\n\n  var i = keys.length;\n  while (i--) {\n    if (hasKey(obj, keys[i])) {\n      newObj[keys[i]] = obj[keys[i]];\n    } else if (upsert) {\n      newObj[keys[i]] = defaultValue || null;\n    }\n  }\n\n  return newObj;\n}\n","import { arrMap } from '../../array';\n\n/**\n * Converts a string to snake_case.\n * @example\n * ```ts\n * snakeCase('camelCase');\n *\n * => 'camel_case'\n * ```\n * @typedef {Object} Options\n * @property {String} [separator=\"_\"] Separator.\n *\n * @param {String} input Source string.\n * @param {Options} options Snake case options.\n *\n * @returns {String} Snake cased string.\n */\nexport default function snakeCase(\n  input: string,\n  options?: {\n    separator?: string;\n  },\n): string {\n  var separator = (options || {}).separator;\n  var match = input.match(\n    /[A-Z]{2,}(?=[A-Z][a-z]+\\d*|\\b)|[A-Z]?[a-z]+\\d*|[A-Z]|\\d+/g,\n  );\n\n  return match\n    ? arrMap(match, function (chunk) {\n        return chunk.toLowerCase();\n      }).join(separator || '_')\n    : input;\n}\n","/**\n * Removes whitespace from both ends of a string.\n * @example\n * ```ts\n * strTrim(' string with whitespace ');\n *\n * => 'string with whitespace'\n * ```\n * @param {String} input Source string.\n *\n * @returns {String} Trimmed string.\n */\nexport default function strTrim(input: string): string {\n  return input.replace(/^[\\s\\uFEFF]+|[\\s\\uFEFF]+$/g, '');\n}\n","import { strTrim } from '../../string';\nimport { hasKey } from '../hasKey';\n\n/**\n * Sanitize an object.\n * @example\n * ```ts\n * objSanitize({\n *   \"1\": null,\n *   \"2\": \"two\",\n *   \"3\": undefined\n * });\n *\n * =>\n * {\n *   \"2\": \"two\"\n * }\n *\n * objSanitize({\n *   \"foo\": 1,\n *   \"bar\": \"one\"\n * }, {\n *   validate: (value) => typeof value !== 'string',\n * });\n *\n * =>\n * {\n *   \"foo\": 1\n * }\n * ```\n * @typedef {Object} Options\n * @property {Function} [validate] Custom validator function.\n * @property {Boolean} [preserveOriginal=false] Preserve the original object.\n * @property {Boolean} [removeEmptyStrings=false] Remove empty strings.\n * @property {Boolean} [removeEmptyObjects=false] Remove empty nested objects.\n *\n * @param {Object} obj Source object.\n * @param {Options} [options] Object sanitize options.\n *\n * @returns {Object} Sanitized object.\n */\nexport default function objSanitize<Type extends Record<any, any>>(\n  obj: Type,\n  options?: {\n    preserveOriginal?: boolean;\n    removeEmptyObjects?: boolean;\n    removeEmptyStrings?: boolean;\n    validate?: (value: typeof obj[keyof typeof obj]) => boolean;\n  },\n): Partial<Type> {\n  var preserveOriginal = (options || {}).preserveOriginal;\n  var removeEmptyObjects = (options || {}).removeEmptyObjects;\n  var removeEmptyStrings = (options || {}).removeEmptyStrings;\n  var validate = (options || {}).validate;\n  var objToModify: Type = obj;\n\n  function recurse(object: Record<any, any>): any {\n    for (var key in object) {\n      if (!hasKey(object, key)) continue;\n\n      var isInvalid = validate ? !validate(object[key]) : false;\n\n      var isEmptyObject =\n        removeEmptyObjects &&\n        object[key] &&\n        typeof object[key] === 'object' &&\n        Object.keys(object[key]).length === 0;\n\n      var isEmptyStr =\n        removeEmptyStrings &&\n        typeof object[key] === 'string' &&\n        !strTrim(object[key]);\n\n      if (\n        object[key] === null ||\n        object[key] === undefined ||\n        isEmptyStr ||\n        isEmptyObject ||\n        isInvalid\n      ) {\n        delete object[key];\n      } else if (typeof object[key] === 'object') {\n        recurse(object[key]);\n      }\n    }\n  }\n\n  recurse(preserveOriginal ? objToModify : obj);\n\n  return preserveOriginal ? objToModify : obj;\n}\n","import { objKeys } from '../objKeys';\n\n/**\n * Sorts the keys of an object alphabetically.\n * @example\n * ```ts\n * const obj = {\n *   \"c\": 1,\n *   \"a\": 2,\n *   \"b\": 3\n * };\n *\n * const newObj = objSort(obj);\n * console.log(newObj);\n * =>\n * {\n *   \"a\": 2,\n *   \"b\": 3,\n *   \"c\": 1\n * }\n * ```\n * @typedef {Object} Options\n * @property {Boolean} [reverse=false] Reverse the sort order.\n *\n * @param {Object} obj Source object.\n * @param {Options} [options] Object sort options.\n *\n * @returns {Object} Object with sorted keys.\n */\nexport default function objSort<Type extends Record<any, any>>(\n  obj: Type,\n  options?: {\n    reverse?: boolean;\n  },\n): Type {\n  var reverse = (options || {}).reverse;\n  var newObj: Type = obj;\n  var keys = objKeys(obj);\n\n  if (reverse) {\n    keys.reverse();\n  } else {\n    keys.sort();\n  }\n\n  var i = keys.length;\n  while (i--) {\n    newObj[keys[i]] = obj[keys[i]];\n  }\n\n  return newObj;\n}\n","import { hasKey } from '../hasKey';\n\n/**\n * Returns an array of values of an object.\n * @example\n * ```ts\n * const obj = {\n *   \"foo\": true,\n *   \"bar\": false,\n * };\n *\n * objValues(obj);\n * => [true, false]\n * ```\n * @param {Object} obj Source object.\n *\n * @returns {Array} Values of the object.\n */\nexport default function objValues<\n  Type extends Record<any, any>,\n  Key extends keyof Type,\n  Value extends Type[Key],\n>(obj: Type): Value[] {\n  var values: Value[] = [];\n\n  for (var key in obj) {\n    if (hasKey(obj, key)) {\n      values.push(obj[key]);\n    }\n  }\n\n  return values;\n}\n"],"names":[],"mappings":"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"}