{"version":3,"file":"index.umd.min.js","sources":["../src/array/arrCross/arrCross.ts","../src/array/arrDiff/arrDiff.ts","../src/array/arrUnion/arrUnion.ts","../src/object/hasKey/hasKey.ts","../src/object/objFlush/objFlush.ts","../src/object/objKeys/objKeys.ts","../src/object/objPick/objPick.ts","../src/object/objSanitize/objSanitize.ts","../src/object/objValues/objValues.ts","../src/string/snakeCase/snakeCase.ts"],"sourcesContent":["/**\n * Returns common elements from the both the arrays.\n * @example\n * ```ts\n * arrCross([1, 2, 3, 4], [2, 3]);\n *\n * => [2, 3]\n * ```\n *\n * @param {Array} arr An array.\n * @param {Array} relArr Another array.\n *\n * @returns {Array} Intersecting elements of the arrays.\n */\nconst arrCross = (arr: any[], relArr: any[]): any[] => {\n  return arr.filter((value) => relArr.indexOf(value) !== -1);\n};\n\nexport default arrCross;\n","/**\n * Returns distinct elements from the first array that are not present in the second array.\n * @example\n * ```ts\n * arrDiff([1, 2, 3, 4], [2, 3]);\n *\n * => [1, 4]\n * ```\n *\n * @param {Array} arr An array.\n * @param {Array} relArr Another array.\n *\n * @returns {Array} Distinct elements from the first array that are not present in the second array.\n */\nconst arrDiff = (arr: any[], relArr: any[]): any[] => {\n  return arr.filter((value) => relArr.indexOf(value) === -1);\n};\n\nexport default arrDiff;\n","import { arrDiff } from '../arrDiff';\n\n/**\n * Clones distinct elements from the second array to the first array.\n * @example\n * ```ts\n * arrUnion([1, 2, 3, 4, 5], [1, 3, 5, 7]);\n *\n * => [1, 2, 3, 4, 5, 7]\n * ```\n *\n * @param {Array} arr An array.\n * @param {Array} relArr Another array.\n *\n * @returns {Array} Union of both the arrays.\n */\nconst arrUnion = (arr: any[], relArr: any[]): any[] => {\n  return [...arr, ...arrDiff(relArr, arr)];\n};\n\nexport default arrUnion;\n","/**\n * Check if object has a specific key or an array of keys.\n * @example\n * ```ts\n * const obj = {\n *   \"foo\": true,\n *   \"bar\": false\n * };\n *\n * hasKey(obj, 'foo');\n * => true\n *\n * hasKey(obj, ['foo', 'bar']);\n * => true\n * ```\n * @param {Object} obj Source object.\n * @param {any | any[]} keys The key or array of keys to check.\n *\n * @returns {Boolean} Result.\n */\nconst hasKey = <Type extends Record<any, any>, Key extends keyof Type>(\n  obj: Type,\n  keys: Key | Key[],\n): boolean => {\n  let hasKeys = true;\n\n  if (Array.isArray(keys)) {\n    let i = keys.length;\n    while (i--) {\n      if (!hasKey(obj, keys[i] as Key)) {\n        hasKeys = false;\n        break;\n      }\n    }\n  } else {\n    if (!Object.prototype.hasOwnProperty.call(obj, keys)) {\n      hasKeys = false;\n    }\n  }\n\n  return hasKeys;\n};\n\nexport default hasKey;\n","import { hasKey } from '../hasKey';\n\n/**\n * Deletes a key, an arrays of keys or all keys from an object.\n * @example\n * ```ts\n * const obj = {\n *   \"foo\": true,\n *   \"bar\": false,\n *   \"one\": 2\n * };\n *\n * objFlush(obj, 'foo');\n * =>\n * {\n *   \"bar\": false,\n *   \"one\": 2\n * }\n *\n * objFlush(obj, ['foo', 'bar']);\n * => {\n *   \"one\": 2\n * }\n *\n * objFlush(obj);\n * => {}\n * ```\n * @param {Object} obj Source object.\n * @param {any | any[]} [keys] The key or an array of keys to remove.\n *\n * @returns {Boolean} Resultant object.\n */\nconst objFlush = <Type extends Record<any, any>, Key extends keyof Type>(\n  obj: Type,\n  keys?: Key | Key[],\n): Partial<Type> => {\n  if (!keys) {\n    for (const key in obj) {\n      if (hasKey(obj, key)) {\n        delete obj[key];\n      }\n    }\n  } else if (Array.isArray(keys)) {\n    let i = keys.length;\n    while (i--) {\n      if (hasKey(obj, keys[i])) {\n        delete obj[keys[i]];\n      }\n    }\n  } else if (hasKey(obj, keys)) {\n    delete obj[keys];\n  }\n\n  return obj;\n};\n\nexport default objFlush;\n","import { hasKey } from '../hasKey';\n\n/**\n * Returns an array of keys of an object.\n * @example\n * ```ts\n * const obj = {\n *   \"foo\": true,\n *   \"bar\": false,\n * };\n *\n * objKeys(obj);\n * => ['foo', 'bar']\n * ```\n * @param {Object} obj Source object.\n *\n * @returns {Array} Keys of the object.\n */\nconst objKeys = <Type extends Record<any, any>>(\n  obj: Type,\n): Array<keyof Type> => {\n  const keys: Array<keyof Type> = [];\n\n  for (const key in obj) {\n    if (hasKey(obj, key)) {\n      keys.push(key);\n    }\n  }\n\n  return keys;\n};\n\nexport default objKeys;\n","import { hasKey } from '../hasKey';\n\n/**\n * Pick specific keys from an object.\n * @example\n * ```ts\n * const obj = {\n *   \"one\": true,\n *   \"two\": false,\n *   \"foo\": \"bar\"\n * };\n *\n * objPick(obj, ['two', 'foo']);\n *\n * =>\n * {\n *   \"two\": false,\n *   \"foo\": \"bar\"\n * }\n * ```\n *\n * @typedef {Object} Options\n * @property {Boolean} [upsert=false] Create new properties for missing keys.\n * @property {any} [defaultValue] Default value to use for upsert.\n *\n * @param {Object} obj Source object.\n * @param {any[]} keys Array of keys to objPick.\n * @param {Options} options Object objPick options.\n *\n * @returns {Object} Object with specified keys.\n */\nconst objPick = <Type extends Record<any, any>, Key extends keyof Type>(\n  obj: Type,\n  keys: Key[] | string[],\n  options?: {\n    defaultValue?: any;\n    upsert?: boolean;\n  },\n): Record<typeof keys[any], typeof obj[keyof typeof obj]> => {\n  const { defaultValue, upsert } = options || {};\n  const newObj: Record<any, any> = {};\n\n  let i = keys.length;\n  while (i--) {\n    if (hasKey(obj, keys[i])) {\n      newObj[keys[i]] = obj[keys[i]];\n    } else if (upsert) {\n      newObj[keys[i]] = defaultValue || null;\n    }\n  }\n\n  return newObj;\n};\n\nexport default objPick;\n","import { hasKey } from '../hasKey';\n\n/**\n * Sanitize an object.\n * @example\n * ```ts\n * objSanitize({\n *   \"1\": null,\n *   \"2\": \"two\",\n *   \"3\": undefined\n * });\n *\n * =>\n * {\n *   \"2\": \"two\"\n * }\n *\n * objSanitize({\n *   \"foo\": 1,\n *   \"bar\": \"one\"\n * }, {\n *   validate: (value) => typeof value !== 'string',\n * });\n *\n * =>\n * {\n *   \"foo\": 1\n * }\n * ```\n *\n * @typedef {Object} Options\n * @property {Function} [validate] Custom validator function.\n * @property {Boolean} [preserveOriginal=false] Preserve the original object.\n * @property {Boolean} [removeEmptyStrings=false] Remove empty strings.\n * @property {Boolean} [removeEmptyObjects=false] Remove empty nested objects.\n *\n * @param {Object} obj Source object.\n * @param {Options} [options] Object objSanitize options.\n *\n * @returns {Object} Sanitized object.\n */\nconst objSanitize = <Type extends Record<any, any>>(\n  obj: Type,\n  options?: {\n    preserveOriginal?: boolean;\n    removeEmptyObjects?: boolean;\n    removeEmptyStrings?: boolean;\n    validate?: (value: typeof obj[keyof typeof obj]) => boolean;\n  },\n): Partial<Type> => {\n  const { preserveOriginal, removeEmptyObjects, removeEmptyStrings, validate } =\n    options || {};\n  const objToModify: Type = obj;\n\n  const recurse = (object: Record<any, any>): any => {\n    for (const key in object) {\n      if (!hasKey(object, key)) continue;\n\n      const isInvalid = validate ? !validate(object[key]) : false;\n\n      const isEmptyObject =\n        removeEmptyObjects &&\n        object[key] &&\n        typeof object[key] === 'object' &&\n        Object.keys(object[key]).length === 0;\n\n      const isEmptyStr =\n        removeEmptyStrings &&\n        typeof object[key] === 'string' &&\n        !object[key].trim();\n\n      if (\n        object[key] === null ||\n        object[key] === undefined ||\n        isEmptyStr ||\n        isEmptyObject ||\n        isInvalid\n      ) {\n        delete object[key];\n      } else if (typeof object[key] === 'object') {\n        recurse(object[key]);\n      }\n    }\n  };\n\n  recurse(preserveOriginal ? objToModify : obj);\n\n  return preserveOriginal ? objToModify : obj;\n};\n\nexport default objSanitize;\n","import { hasKey } from '../hasKey';\n\n/**\n * Returns an array of values of an object.\n * @example\n * ```ts\n * const obj = {\n *   \"foo\": true,\n *   \"bar\": false,\n * };\n *\n * objValues(obj);\n * => [true, false]\n * ```\n * @param {Object} obj Source object.\n *\n * @returns {Array} Values of the object.\n */\nconst objValues = <\n  Type extends Record<any, any>,\n  Key extends keyof Type,\n  Value extends Type[Key],\n>(\n  obj: Type,\n): Value[] => {\n  const values: Value[] = [];\n\n  for (const key in obj) {\n    if (hasKey(obj, key)) {\n      values.push(obj[key]);\n    }\n  }\n\n  return values;\n};\n\nexport default objValues;\n","/**\n * Converts a string to snake_case.\n * @example\n * ```ts\n * snakeCase('camelCase');\n *\n * => camel_case\n * ```\n *\n * @typedef {Object} Options\n * @property {String} [separator=\"_\"] Separator.\n *\n * @param {String} input Source string.\n * @param {Options} options Snake case options.\n *\n * @returns {String} Snake cased string.\n */\nconst snakeCase = (\n  input: string,\n  options?: {\n    separator?: string;\n  },\n): string => {\n  const { separator } = options || {};\n  const match = input.match(\n    /[A-Z]{2,}(?=[A-Z][a-z]+\\d*|\\b)|[A-Z]?[a-z]+\\d*|[A-Z]|\\d+/g,\n  );\n\n  return match\n    ? match.map((chunk: string) => chunk.toLowerCase()).join(separator || '_')\n    : input;\n};\n\nexport default snakeCase;\n"],"names":["arrDiff","arr","relArr","filter","value","indexOf","hasKey","obj","keys","hasKeys","Array","isArray","i","length","Object","prototype","hasOwnProperty","call","__spreadArray","key","push","options","_a","defaultValue","upsert","newObj","preserveOriginal","removeEmptyObjects","removeEmptyStrings","validate","objToModify","recurse","object","isInvalid","isEmptyObject","isEmptyStr","trim","undefined","values","input","separator","match","map","chunk","toLowerCase","join"],"mappings":";;;;;8OAcA,ICAMA,EAAU,SAACC,EAAYC,GAC3B,OAAOD,EAAIE,QAAO,SAACC,GAAU,OAA2B,IAA3BF,EAAOG,QAAQD,EAAa,GAC3D,mMCAA,ICIME,EAAS,SACbC,EACAC,GAEA,IAAIC,GAAU,EAEd,GAAIC,MAAMC,QAAQH,IAEhB,IADA,IAAII,EAAIJ,EAAKK,OACND,KACL,IAAKN,EAAOC,EAAKC,EAAKI,IAAY,CAChCH,GAAU,EACV,KACD,OAGEK,OAAOC,UAAUC,eAAeC,KAAKV,EAAKC,KAC7CC,GAAU,GAId,OAAOA,CACT,aH3BiB,SAACR,EAAYC,GAC5B,OAAOD,EAAIE,QAAO,SAACC,GAAU,OAA2B,IAA3BF,EAAOG,QAAQD,EAAa,GAC3D,yBEAiB,SAACH,EAAYC,GAC5B,OAAWgB,EAAAA,EAAA,GAAAjB,MAAQD,EAAQE,EAAQD,IAAM,EAC3C,wBEciB,SACfM,EACAC,GAEA,GAAKA,EAME,GAAIE,MAAMC,QAAQH,GAEvB,IADA,IAAII,EAAIJ,EAAKK,OACND,KACDN,EAAOC,EAAKC,EAAKI,YACZL,EAAIC,EAAKI,SAGXN,EAAOC,EAAKC,WACdD,EAAIC,QAbX,IAAK,IAAMW,KAAOZ,EACZD,EAAOC,EAAKY,WACPZ,EAAIY,GAcjB,OAAOZ,CACT,YCpCgB,SACdA,GAEA,IAAMC,EAA0B,GAEhC,IAAK,IAAMW,KAAOZ,EACZD,EAAOC,EAAKY,IACdX,EAAKY,KAAKD,GAId,OAAOX,CACT,YCCgB,SACdD,EACAC,EACAa,GASA,IAJM,IAAAC,EAA2BD,GAAW,CAAA,EAApCE,EAAYD,EAAAC,aAAEC,EAAMF,EAAAE,OACtBC,EAA2B,CAAA,EAE7Bb,EAAIJ,EAAKK,OACND,KACDN,EAAOC,EAAKC,EAAKI,IACnBa,EAAOjB,EAAKI,IAAML,EAAIC,EAAKI,IAClBY,IACTC,EAAOjB,EAAKI,IAAMW,GAAgB,MAItC,OAAOE,CACT,gBCXoB,SAClBlB,EACAc,GAOM,IAAAC,EACJD,GAAW,CAAA,EADLK,EAAgBJ,EAAAI,iBAAEC,EAAkBL,EAAAK,mBAAEC,EAAkBN,EAAAM,mBAAEC,aAE5DC,EAAoBvB,EAEpBwB,EAAU,SAACC,GACf,IAAK,IAAMb,KAAOa,EAChB,GAAK1B,EAAO0B,EAAQb,GAApB,CAEA,IAAMc,IAAYJ,IAAYA,EAASG,EAAOb,IAExCe,EACJP,GACAK,EAAOb,IACgB,iBAAhBa,EAAOb,IACsB,IAApCL,OAAON,KAAKwB,EAAOb,IAAMN,OAErBsB,EACJP,GACuB,iBAAhBI,EAAOb,KACba,EAAOb,GAAKiB,OAGG,OAAhBJ,EAAOb,SACSkB,IAAhBL,EAAOb,IACPgB,GACAD,GACAD,SAEOD,EAAOb,GACkB,iBAAhBa,EAAOb,IACvBY,EAAQC,EAAOb,GAxBkB,CA2BvC,EAIA,OAFAY,EAAQL,EAAmBI,EAAcvB,GAElCmB,EAAmBI,EAAcvB,CAC1C,cCtEkB,SAKhBA,GAEA,IAAM+B,EAAkB,GAExB,IAAK,IAAMnB,KAAOZ,EACZD,EAAOC,EAAKY,IACdmB,EAAOlB,KAAKb,EAAIY,IAIpB,OAAOmB,CACT,cCjBkB,SAChBC,EACAlB,GAIQ,IAAAmB,GAAcnB,GAAW,CAAA,aAC3BoB,EAAQF,EAAME,MAClB,6DAGF,OAAOA,EACHA,EAAMC,KAAI,SAACC,GAAkB,OAAAA,EAAMC,iBAAeC,KAAKL,GAAa,KACpED,CACN"}