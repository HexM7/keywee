{"version":3,"file":"index.umd.min.js","sources":["../src/array/arrFilter/arrFilter.ts","../src/array/arrIndex/arrIndex.ts","../src/array/arrDiff/arrDiff.ts","../src/array/arrMap/arrMap.ts","../src/object/hasKey/hasKey.ts","../src/object/objKeys/objKeys.ts","../src/string/strTrim/strTrim.ts","../src/array/arrCross/arrCross.ts","../src/array/arrUnion/arrUnion.ts","../src/object/objFlush/objFlush.ts","../src/object/objPick/objPick.ts","../src/object/objSanitize/objSanitize.ts","../src/object/objSort/objSort.ts","../src/object/objValues/objValues.ts","../src/string/snakeCase/snakeCase.ts"],"sourcesContent":["/**\n *  Returns a new array with the elements from the given array that pass the test implemented by the provided function.\n * @example\n * ```ts\n * arrFilter(\n *   [1, 2, 3, 4, 5],\n *   function(element) {\n *     return element % 2 === 0;\n *   },\n * );\n *\n * => [2, 4]\n * ```\n * @param {Array} arr An array.\n * @param {Function} func Function that returns a boolean value.\n * @param {*} [thisArg] Value to use as `this` when executing function.\n *\n * @returns {Array} A new array with the elements that passed the test implemented by the function.\n */\nexport default function arrFilter(\n  arr: any[],\n  func: (element: typeof arr[any], index: number, array: typeof arr) => boolean,\n  thisArg?: any,\n): Partial<typeof arr> {\n  var obj = Object(arr);\n  var len = obj.length >>> 0;\n  var res: Partial<typeof arr> = [];\n\n  for (var i = 0; i < len; i++) {\n    if (i in obj) {\n      var val = obj[i];\n      if (func.call(thisArg, val, i, obj)) res.push(val);\n    }\n  }\n\n  return res;\n}\n","/**\n * Returns the first index at which a given element can be found in the array, or -1 if it is not present.\n * @example\n * ```ts\n * arrIndex([1, 2, 3, 4, 5], 4);\n *\n * => 3\n * ```\n * @param {Array} arr An array.\n * @param {*} element The element to search for.\n * @param {Number} [from] The index to start the search at.\n *\n * @returns {Number} The index of the element in the array.\n */\nexport default function arrIndex(\n  arr: any[],\n  element: typeof arr[any],\n  from?: number,\n): number {\n  var len = arr.length >>> 0;\n\n  var fromIndex = Number(from) || 0;\n  fromIndex = fromIndex < 0 ? Math.ceil(fromIndex) : Math.floor(fromIndex);\n  if (fromIndex < 0) fromIndex += len;\n\n  for (; fromIndex < len; fromIndex++) {\n    if (fromIndex in arr && arr[fromIndex] === element) return fromIndex;\n  }\n  return -1;\n}\n","import { arrFilter } from '../arrFilter';\nimport { arrIndex } from '../arrIndex';\n\n/**\n * Returns distinct elements from the first array that are not present in the second array.\n * @example\n * ```ts\n * arrDiff([1, 2, 3, 4], [2, 3]);\n *\n * => [1, 4]\n * ```\n *\n * @param {Array} arr An array.\n * @param {Array} relArr Another array.\n *\n * @returns {Array} Distinct elements from the first array that are not present in the second array.\n */\nexport default function arrDiff(arr: any[], relArr: any[]): any[] {\n  return arrFilter(arr, function (element) {\n    return arrIndex(relArr, element) === -1;\n  });\n}\n","/**\n * Creates a new array populated with the results of calling a provided function on every element in the calling array.\n * @example\n * ```ts\n * arrMap([1, 2, 3], function(element) {\n *   return element * 2;\n * });\n *\n * => [2, 4, 6]\n * ```\n * @param {Array} arr An array.\n * @param {Function} func Function that returns a value.\n * @param {*} [thisArg] Value to use as `this` when executing function.\n *\n * @returns {Array} A new array with the elements produced by the function.\n */\nexport default function arrMap(\n  arr: any[],\n  func: (element: typeof arr[any], index: number, array: typeof arr) => any,\n  thisArg?: any,\n): Partial<typeof arr> {\n  var array = [];\n\n  for (var i = 0; i < arr.length; i++) {\n    array.push(func.call(thisArg, arr[i], i, arr));\n  }\n\n  return array;\n}\n","/**\n * Check if object has a specific key or an array of keys.\n * @example\n * ```ts\n * const obj = {\n *   \"foo\": true,\n *   \"bar\": false\n * };\n *\n * hasKey(obj, 'foo');\n * => true\n *\n * hasKey(obj, ['foo', 'bar']);\n * => true\n * ```\n * @param {Object} obj Source object.\n * @param {any|any[]} keys The key or array of keys to check.\n *\n * @returns {Boolean} Result.\n */\nexport default function hasKey<\n  Type extends Record<any, any>,\n  Key extends keyof Type,\n>(obj: Type, keys: Key | Key[]): boolean {\n  var hasKeys = true;\n\n  if (Array.isArray(keys)) {\n    var i = keys.length;\n    while (i--) {\n      if (!hasKey(obj, keys[i] as Key)) {\n        hasKeys = false;\n        break;\n      }\n    }\n  } else {\n    if (!Object.prototype.hasOwnProperty.call(obj, keys)) {\n      hasKeys = false;\n    }\n  }\n\n  return hasKeys;\n}\n","import { hasKey } from '../hasKey';\n\n/**\n * Returns an array of keys of an object.\n * @example\n * ```ts\n * const obj = {\n *   \"foo\": true,\n *   \"bar\": false,\n * };\n *\n * objKeys(obj);\n * => ['foo', 'bar']\n * ```\n * @param {Object} obj Source object.\n *\n * @returns {Array} Keys of the object.\n */\nexport default function objKeys<Type extends Record<any, any>>(\n  obj: Type,\n): Array<keyof Type> {\n  var keys: Array<keyof Type> = [];\n\n  for (var key in obj) {\n    if (hasKey(obj, key)) {\n      keys.push(key);\n    }\n  }\n\n  return keys;\n}\n","/**\n * Removes whitespace from both ends of a string.\n * @example\n * ```ts\n * strTrim(' string with whitespace ');\n *\n * => 'string with whitespace'\n * ```\n * @param {String} input Source string.\n *\n * @returns {String} Trimmed string.\n */\nexport default function strTrim(input: string): string {\n  return input.replace(/^[\\s\\uFEFF]+|[\\s\\uFEFF]+$/g, '');\n}\n","import { arrFilter } from '../arrFilter';\nimport { arrIndex } from '../arrIndex';\n\n/**\n * Returns common elements from the both the arrays.\n * @example\n * ```ts\n * arrCross([1, 2, 3, 4], [2, 3]);\n *\n * => [2, 3]\n * ```\n *\n * @param {Array} arr An array.\n * @param {Array} relArr Another array.\n *\n * @returns {Array} Intersecting elements of the arrays.\n */\nexport default function arrCross(arr: any[], relArr: any[]): any[] {\n  return arrFilter(arr, function (element) {\n    return arrIndex(relArr, element) !== -1;\n  });\n}\n","import { arrDiff } from '../arrDiff';\n\n/**\n * Clones distinct elements from the second array to the first array.\n * @example\n * ```ts\n * arrUnion([1, 2, 3, 4, 5], [1, 3, 5, 7]);\n *\n * => [1, 2, 3, 4, 5, 7]\n * ```\n * @param {Array} arr An array.\n * @param {Array} relArr Another array.\n *\n * @returns {Array} Union of both the arrays.\n */\nexport default function arrUnion(arr: any[], relArr: any[]): any[] {\n  return arr.concat(arrDiff(relArr, arr));\n}\n","import { hasKey } from '../hasKey';\n\n/**\n * Deletes a key, an arrays of keys or all keys from an object.\n * @example\n * ```ts\n * const obj = {\n *   \"foo\": true,\n *   \"bar\": false,\n *   \"one\": 2\n * };\n *\n * objFlush(obj, 'foo');\n * =>\n * {\n *   \"bar\": false,\n *   \"one\": 2\n * }\n *\n * objFlush(obj, ['foo', 'bar']);\n * => {\n *   \"one\": 2\n * }\n *\n * objFlush(obj);\n * => {}\n * ```\n * @param {Object} obj Source object.\n * @param {any|any[]} [keys] The key or an array of keys to remove.\n *\n * @returns {Boolean} Resultant object.\n */\nexport default function objFlush<\n  Type extends Record<any, any>,\n  Key extends keyof Type,\n>(obj: Type, keys?: Key | Key[]): Partial<Type> {\n  if (!keys) {\n    for (var key in obj) {\n      if (hasKey(obj, key)) {\n        delete obj[key];\n      }\n    }\n  } else if (Array.isArray(keys)) {\n    var i = keys.length;\n    while (i--) {\n      if (hasKey(obj, keys[i])) {\n        delete obj[keys[i]];\n      }\n    }\n  } else if (hasKey(obj, keys)) {\n    delete obj[keys];\n  }\n\n  return obj;\n}\n","import { hasKey } from '../hasKey';\n\n/**\n * Pick specific keys from an object.\n * @example\n * ```ts\n * const obj = {\n *   \"one\": true,\n *   \"two\": false,\n *   \"foo\": \"bar\"\n * };\n *\n * objPick(obj, ['two', 'foo']);\n *\n * =>\n * {\n *   \"two\": false,\n *   \"foo\": \"bar\"\n * }\n * ```\n *\n * @typedef {Object} Options\n * @property {Boolean} [upsert=false] Create new properties for missing keys.\n * @property {any} [defaultValue] Default value to use for upsert.\n *\n * @param {Object} obj Source object.\n * @param {any[]} keys Array of keys to objPick.\n * @param {Options} options Object objPick options.\n *\n * @returns {Object} Object with specified keys.\n */\nexport default function objPick<\n  Type extends Record<any, any>,\n  Key extends keyof Type,\n>(\n  obj: Type,\n  keys: Key[] | string[],\n  options?: {\n    defaultValue?: any;\n    upsert?: boolean;\n  },\n): Record<typeof keys[any], typeof obj[keyof typeof obj]> {\n  var defaultValue = (options || {}).defaultValue;\n  var upsert = (options || {}).upsert;\n  var newObj: Record<any, any> = {};\n\n  var i = keys.length;\n  while (i--) {\n    if (hasKey(obj, keys[i])) {\n      newObj[keys[i]] = obj[keys[i]];\n    } else if (upsert) {\n      newObj[keys[i]] = defaultValue || null;\n    }\n  }\n\n  return newObj;\n}\n","import { strTrim } from '../../string';\nimport { hasKey } from '../hasKey';\n\n/**\n * Sanitize an object.\n * @example\n * ```ts\n * objSanitize({\n *   \"1\": null,\n *   \"2\": \"two\",\n *   \"3\": undefined\n * });\n *\n * =>\n * {\n *   \"2\": \"two\"\n * }\n *\n * objSanitize({\n *   \"foo\": 1,\n *   \"bar\": \"one\"\n * }, {\n *   validate: (value) => typeof value !== 'string',\n * });\n *\n * =>\n * {\n *   \"foo\": 1\n * }\n * ```\n * @typedef {Object} Options\n * @property {Function} [validate] Custom validator function.\n * @property {Boolean} [preserveOriginal=false] Preserve the original object.\n * @property {Boolean} [removeEmptyStrings=false] Remove empty strings.\n * @property {Boolean} [removeEmptyObjects=false] Remove empty nested objects.\n *\n * @param {Object} obj Source object.\n * @param {Options} [options] Object sanitize options.\n *\n * @returns {Object} Sanitized object.\n */\nexport default function objSanitize<Type extends Record<any, any>>(\n  obj: Type,\n  options?: {\n    preserveOriginal?: boolean;\n    removeEmptyObjects?: boolean;\n    removeEmptyStrings?: boolean;\n    validate?: (value: typeof obj[keyof typeof obj]) => boolean;\n  },\n): Partial<Type> {\n  var preserveOriginal = (options || {}).preserveOriginal;\n  var removeEmptyObjects = (options || {}).removeEmptyObjects;\n  var removeEmptyStrings = (options || {}).removeEmptyStrings;\n  var validate = (options || {}).validate;\n  var objToModify: Type = obj;\n\n  function recurse(object: Record<any, any>): any {\n    for (var key in object) {\n      if (!hasKey(object, key)) continue;\n\n      var isInvalid = validate ? !validate(object[key]) : false;\n\n      var isEmptyObject =\n        removeEmptyObjects &&\n        object[key] &&\n        typeof object[key] === 'object' &&\n        Object.keys(object[key]).length === 0;\n\n      var isEmptyStr =\n        removeEmptyStrings &&\n        typeof object[key] === 'string' &&\n        !strTrim(object[key]);\n\n      if (\n        object[key] === null ||\n        object[key] === undefined ||\n        isEmptyStr ||\n        isEmptyObject ||\n        isInvalid\n      ) {\n        delete object[key];\n      } else if (typeof object[key] === 'object') {\n        recurse(object[key]);\n      }\n    }\n  }\n\n  recurse(preserveOriginal ? objToModify : obj);\n\n  return preserveOriginal ? objToModify : obj;\n}\n","import { objKeys } from '../objKeys';\n\n/**\n * Sorts the keys of an object alphabetically.\n * @example\n * ```ts\n * const obj = {\n *   \"c\": 1,\n *   \"a\": 2,\n *   \"b\": 3\n * };\n *\n * const newObj = objSort(obj);\n * console.log(newObj);\n * =>\n * {\n *   \"a\": 2,\n *   \"b\": 3,\n *   \"c\": 1\n * }\n * ```\n * @typedef {Object} Options\n * @property {Boolean} [reverse=false] Reverse the sort order.\n *\n * @param {Object} obj Source object.\n * @param {Options} [options] Object sort options.\n *\n * @returns {Object} Object with sorted keys.\n */\nexport default function objSort<Type extends Record<any, any>>(\n  obj: Type,\n  options?: {\n    reverse?: boolean;\n  },\n): Type {\n  var reverse = (options || {}).reverse;\n  var newObj: Type = obj;\n  var keys = objKeys(obj);\n\n  if (reverse) {\n    keys.reverse();\n  } else {\n    keys.sort();\n  }\n\n  var i = keys.length;\n  while (i--) {\n    newObj[keys[i]] = obj[keys[i]];\n  }\n\n  return newObj;\n}\n","import { hasKey } from '../hasKey';\n\n/**\n * Returns an array of values of an object.\n * @example\n * ```ts\n * const obj = {\n *   \"foo\": true,\n *   \"bar\": false,\n * };\n *\n * objValues(obj);\n * => [true, false]\n * ```\n * @param {Object} obj Source object.\n *\n * @returns {Array} Values of the object.\n */\nexport default function objValues<\n  Type extends Record<any, any>,\n  Key extends keyof Type,\n  Value extends Type[Key],\n>(obj: Type): Value[] {\n  var values: Value[] = [];\n\n  for (var key in obj) {\n    if (hasKey(obj, key)) {\n      values.push(obj[key]);\n    }\n  }\n\n  return values;\n}\n","import { arrMap } from '../../array';\n\n/**\n * Converts a string to snake_case.\n * @example\n * ```ts\n * snakeCase('camelCase');\n *\n * => 'camel_case'\n * ```\n * @typedef {Object} Options\n * @property {String} [separator=\"_\"] Separator.\n *\n * @param {String} input Source string.\n * @param {Options} options Snake case options.\n *\n * @returns {String} Snake cased string.\n */\nexport default function snakeCase(\n  input: string,\n  options?: {\n    separator?: string;\n  },\n): string {\n  var separator = (options || {}).separator;\n  var match = input.match(\n    /[A-Z]{2,}(?=[A-Z][a-z]+\\d*|\\b)|[A-Z]?[a-z]+\\d*|[A-Z]|\\d+/g,\n  );\n\n  return match\n    ? arrMap(match, function (chunk) {\n        return chunk.toLowerCase();\n      }).join(separator || '_')\n    : input;\n}\n"],"names":["arrFilter","arr","func","thisArg","obj","Object","len","length","res","i","val","call","push","arrIndex","element","from","fromIndex","Number","Math","ceil","floor","arrDiff","relArr","arrMap","array","hasKey","keys","hasKeys","Array","isArray","prototype","hasOwnProperty","objKeys","key","strTrim","input","replace","concat","options","defaultValue","upsert","newObj","preserveOriginal","removeEmptyObjects","removeEmptyStrings","validate","objToModify","recurse","object","isInvalid","isEmptyObject","isEmptyStr","undefined","reverse","sort","values","separator","match","chunk","toLowerCase","join"],"mappings":"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"}