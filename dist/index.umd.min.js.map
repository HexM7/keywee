{"version":3,"file":"index.umd.min.js","sources":["../src/array/arrFilter/arrFilter.ts","../src/array/arrIndex/arrIndex.ts","../src/array/arrDiff/arrDiff.ts","../src/array/arrMap/arrMap.ts","../src/array/arrReduce/arrReduce.ts","../src/math/vecDot/vecDot.ts","../src/object/hasKey/hasKey.ts","../src/object/objKeys/objKeys.ts","../src/object/objEqual/objEqual.ts","../src/string/strTrim/strTrim.ts","../src/array/arrCross/arrCross.ts","../src/array/arrEject/arrEject.ts","../src/array/arrProd/arrProd.ts","../src/array/arrSum/arrSum.ts","../src/array/arrUnion/arrUnion.ts","../src/math/clamp/clamp.ts","../src/object/objDiff/objDiff.ts","../src/object/objFlush/objFlush.ts","../src/object/objPick/objPick.ts","../src/object/objSanitize/objSanitize.ts","../src/object/objSort/objSort.ts","../src/object/objValues/objValues.ts","../src/string/snakeCase/snakeCase.ts","../src/math/vecMag/vecMag.ts"],"sourcesContent":["/**\n *  Returns a new array with the elements from the given array that pass the test implemented by the provided function.\n * @example\n *\n * arrFilter(\n *   [1, 2, 3, 4, 5],\n *   function(element) {\n *     return element % 2 === 0;\n *   },\n * );\n *\n * => [2, 4]\n *\n * @param {Array} arr An array.\n * @param {Function} func Function that returns a boolean value.\n * @param {*} [thisArg] Value to use as `this` when executing function.\n *\n * @returns {Array} A new array with the elements that passed the test implemented by the function.\n */\nexport default function arrFilter(\n  arr: any[],\n  func: (element: typeof arr[any], index: number, array: typeof arr) => boolean,\n  thisArg?: any,\n): Partial<typeof arr> {\n  var obj = Object(arr);\n  var len = obj.length >>> 0;\n  var res: Partial<typeof arr> = [];\n\n  for (var i = 0; i < len; i++) {\n    if (i in obj) {\n      var val = obj[i];\n      if (func.call(thisArg, val, i, obj)) res.push(val);\n    }\n  }\n\n  return res;\n}\n","/**\n * Returns the first index at which a given element can be found in the array, or -1 if it is not present.\n * @example\n *\n * arrIndex([1, 2, 3, 4, 5], 4);\n *\n * => 3\n *\n * @param {Array} arr An array.\n * @param {*} element The element to search for.\n * @param {number} [from] The index to start the search at.\n *\n * @returns {number} The index of the element in the array.\n */\nexport default function arrIndex(\n  arr: any[],\n  element: typeof arr[number],\n  from?: number,\n): number {\n  var len = arr.length >>> 0;\n\n  var fromIndex = Number(from) || 0;\n  fromIndex = fromIndex < 0 ? Math.ceil(fromIndex) : Math.floor(fromIndex);\n  if (fromIndex < 0) fromIndex += len;\n\n  for (; fromIndex < len; fromIndex++) {\n    if (fromIndex in arr && arr[fromIndex] === element) return fromIndex;\n  }\n  return -1;\n}\n","import { arrFilter } from '../arrFilter';\nimport { arrIndex } from '../arrIndex';\n\n/**\n * Returns distinct elements from the first array that are not present in the second array.\n * @example\n *\n * arrDiff([1, 2, 3, 4], [2, 3]);\n *\n * => [1, 4]\n *\n *\n * @param {Array} arr An array.\n * @param {Array} relArr Another array.\n *\n * @returns {Array} Distinct elements from the first array that are not present in the second array.\n */\nexport default function arrDiff(arr: any[], relArr: any[]): any[] {\n  return arrFilter(arr, function (element) {\n    return arrIndex(relArr, element) === -1;\n  });\n}\n","/**\n * Creates a new array populated with the results of calling a provided function on every element in the calling array.\n * @example\n *\n * arrMap([1, 2, 3], function(element) {\n *   return element * 2;\n * });\n *\n * => [2, 4, 6]\n *\n * @param {Array} arr An array.\n * @param {Function} func Function that returns a value.\n * @param {*} [thisArg] Value to use as `this` when executing function.\n *\n * @returns {Array} A new array with the elements produced by the function.\n */\nexport default function arrMap(\n  arr: any[],\n  func: (element: typeof arr[any], index: number, array: typeof arr) => any,\n  thisArg?: any,\n): Partial<typeof arr> {\n  var array = [];\n\n  for (var i = 0; i < arr.length; i++) {\n    array.push(func.call(thisArg, arr[i], i, arr));\n  }\n\n  return array;\n}\n","/**\n * Executes the callback function on each element of the array, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the array is a single value.\n * @example\n *\n * const result = arrReduce(\n *   [1, 2, 3, 4],\n *   function(previous, current) {\n *     return previous + current;\n *   },\n *   0,\n * );\n *\n * => 10\n *\n * @param {Array} arr An array.\n * @param {Function} cb The reducer function.\n * @param {*} [initialVal] An optional initial value.\n *\n * @returns {*} The collective result of reducer callback.\n */\nexport default function arrReduce(\n  arr: any[],\n  cb: (\n    previousValue: typeof arr[number],\n    currentValue: typeof arr[number],\n    currentIndex: number,\n    array: typeof arr,\n  ) => any,\n  initialVal?: typeof arr[number],\n): any {\n  var accumulator = initialVal;\n  for (var i = 0; i < arr.length; i++) {\n    if (accumulator !== undefined) {\n      accumulator = cb.call(undefined, accumulator, arr[i], i, arr);\n    } else {\n      accumulator = arr[i];\n    }\n  }\n\n  return accumulator;\n}\n","import { arrMap, arrReduce } from '../../array';\nimport type { Vector } from '../types';\n\n/**\n * Returns the dot product of two vectors.\n * @example\n *\n * vecDot([1, 2], [3, 4]);\n *\n * => 11\n *\n * @param {Vector} vec A vector.\n * @param {Vector} relVec Another vector.\n *\n * @returns {number} Dot product of both the vectors.\n */\nexport default function vecDot(vec: Vector, relVec: Vector): number {\n  return arrReduce(\n    arrMap(vec, function (_, index) {\n      return vec[index]! * relVec[index]!;\n    }),\n    function (previousValue, currentValue) {\n      return previousValue + currentValue;\n    },\n  );\n}\n","/**\n * Check if object has a specific key or an array of keys.\n * @example\n *\n * const obj = {\n *   \"foo\": true,\n *   \"bar\": false\n * };\n *\n * hasKey(obj, 'foo');\n * => true\n *\n * hasKey(obj, ['foo', 'bar']);\n * => true\n *\n * @param {Object} obj Source object.\n * @param {any|any[]} keys The key or array of keys to check.\n *\n * @returns {Boolean} Result.\n */\nexport default function hasKey<\n  Type extends Record<any, any>,\n  Key extends keyof Type,\n>(obj: Type, keys: Key | Key[]): boolean {\n  var hasKeys = true;\n\n  if (Array.isArray(keys)) {\n    var i = keys.length;\n    while (i--) {\n      if (!hasKey(obj, keys[i] as Key)) {\n        hasKeys = false;\n        break;\n      }\n    }\n  } else {\n    if (!Object.prototype.hasOwnProperty.call(obj, keys)) {\n      hasKeys = false;\n    }\n  }\n\n  return hasKeys;\n}\n","import { hasKey } from '../hasKey';\n\n/**\n * Returns an array of keys of an object.\n * @example\n *\n * const obj = {\n *   \"foo\": true,\n *   \"bar\": false,\n * };\n *\n * objKeys(obj);\n * => ['foo', 'bar']\n *\n * @param {Object} obj Source object.\n *\n * @returns {Array} Keys of the object.\n */\nexport default function objKeys<Type extends Record<any, any>>(\n  obj: Type,\n): Array<keyof Type> {\n  var keys: Array<keyof Type> = [];\n\n  for (var key in obj) {\n    if (hasKey(obj, key)) {\n      keys.push(key);\n    }\n  }\n\n  return keys;\n}\n","import { objKeys } from '../objKeys';\n\n/**\n * Compares two objects for equality.\n * @example\n *\n * objEqual({ foo: 1, bar: 2 }, { foo: 1, bar: 2 });\n * => true\n *\n * objEqual({ foo: 1, bar: 2 }, { foo: 1, bar: false });\n * => false\n *\n * @param {Object} obj First object.\n * @param {Object} relObj Second object.\n *\n * @returns {Boolean} A boolean value indicating the similar nature of the two objects.\n */\nexport default function objEqual<Type extends Record<any, any>>(\n  obj: Type,\n  relObj: Type,\n): boolean {\n  if (\n    typeof obj == 'object' &&\n    obj != null &&\n    typeof relObj == 'object' &&\n    relObj != null\n  ) {\n    if (objKeys(obj).length - objKeys(relObj).length !== 0) {\n      return false;\n    }\n\n    for (var objKey in obj) {\n      if (!(objKey in relObj) || !objEqual(obj[objKey], relObj[objKey])) {\n        return false;\n      }\n    }\n\n    for (var relObjKey in relObj) {\n      if (!(relObjKey in obj) || !objEqual(relObj[relObjKey], obj[relObjKey])) {\n        return false;\n      }\n    }\n\n    return true;\n  } else {\n    return obj === relObj;\n  }\n}\n","/**\n * Removes whitespace from both ends of a string.\n * @example\n *\n * strTrim(' string with whitespace ');\n *\n * => 'string with whitespace'\n *\n * @param {String} input Source string.\n *\n * @returns {String} Trimmed string.\n */\nexport default function strTrim(input: string): string {\n  return input.replace(/^[\\s\\uFEFF]+|[\\s\\uFEFF]+$/g, '');\n}\n","import { arrFilter } from '../arrFilter';\nimport { arrIndex } from '../arrIndex';\n\n/**\n * Returns common elements from the both the arrays.\n * @example\n *\n * arrCross([1, 2, 3, 4], [2, 3]);\n *\n * => [2, 3]\n *\n *\n * @param {Array} arr An array.\n * @param {Array} relArr Another array.\n *\n * @returns {Array} Intersecting elements of the arrays.\n */\nexport default function arrCross(arr: any[], relArr: any[]): any[] {\n  return arrFilter(arr, function (element) {\n    return arrIndex(relArr, element) !== -1;\n  });\n}\n","import { arrIndex } from '../arrIndex';\n\n/**\n * Removes elements from an array.\n * @example\n *\n * arrEject([1, 2, 3, 4], 2);\n *\n * => [1, 3, 4]\n *\n *\n * @param {Array} arr An array.\n * @param {any} elem Element to remove from the array.\n *\n * @returns {Array} Array with ejected elements.\n */\nexport default function arrEject<Type extends any[]>(\n  arr: Type,\n  elem: typeof arr[number],\n): Type {\n  var index = arrIndex(arr, elem);\n\n  if (index > -1) {\n    arr.splice(index, 1);\n  }\n\n  return arr;\n}\n","import { arrReduce } from '../arrReduce';\n\n/**\n * Returns the product of all the elements in the given numeric array.\n * @example\n *\n * arrProd([2, 4, 8]);\n * => 64\n *\n * @param {Array} arr A numeric array.\n * @returns {Number} The product of all the elements of the array.\n */\nexport default function arrProd(arr: number[]): number {\n  return arrReduce(\n    arr,\n    function (previousValue, currentValue) {\n      return previousValue * currentValue;\n    },\n    1,\n  );\n}\n","import { arrReduce } from '../arrReduce';\n\n/**\n * Returns the sum of all the elements in the given numeric array.\n * @example\n *\n * arrSum([1, 2, 3]);\n * => 6\n *\n * @param {Array} arr A numeric array.\n * @returns {Number} The sum of all the elements of the array.\n */\nexport default function arrSum(arr: number[]): number {\n  return arrReduce(\n    arr,\n    function (previousValue, currentValue) {\n      return previousValue + currentValue;\n    },\n    0,\n  );\n}\n","import { arrDiff } from '../arrDiff';\n\n/**\n * Clones distinct elements from the second array to the first array.\n * @example\n *\n * arrUnion([1, 2, 3, 4, 5], [1, 3, 5, 7]);\n *\n * => [1, 2, 3, 4, 5, 7]\n *\n * @param {Array} arr An array.\n * @param {Array} relArr Another array.\n *\n * @returns {Array} Union of both the arrays.\n */\nexport default function arrUnion(arr: any[], relArr: any[]): any[] {\n  return arr.concat(arrDiff(relArr, arr));\n}\n","/**\n * Returns a number whose value is bound to the given range.\n * @example\n *\n * clamp(0, 64, 32);\n * => 32\n *\n * @param {number} min The lower boundary of the output range.\n * @param {number} value The base value of the output range.\n * @param {number} max The upper boundary of the output range,\n *\n * @returns {number} A number in the suitable range.\n */\nexport default function clamp(min: number, value: number, max: number): number {\n  return Math.min(Math.max(value, min), max);\n}\n","import { hasKey } from '../hasKey';\nimport { objEqual } from '../objEqual';\nimport { objKeys } from '../objKeys';\n\n/**\n * Returns an array of similar keys having different values along the two given objects.\n * @example\n *\n * objDiff({ foo: 1, bar: 2 }, { foo: true, bar: 2 });\n * => ['foo']\n *\n * objDiff({ foo: 1, bar: 2 }, { foo: 1, bar: 2 });\n * => false\n *\n * @param {Object} obj First object.\n * @param {Object} relObj Second object.\n *\n * @returns {Array|Boolean} Array of modified keys or false if the two objects are intact.\n */\nexport default function objDiff<\n  Type extends Record<any, any>,\n  Key extends keyof Type,\n>(obj: Type, relObj: Type): Key[] | false {\n  if (objEqual(obj, relObj)) {\n    return false;\n  }\n\n  var keys = objKeys(obj);\n  var modifiedKeys: Key[] = [];\n  var i = keys.length;\n\n  while (i--) {\n    if (hasKey(relObj, keys[i]) && !objEqual(obj[keys[i]], relObj[keys[i]])) {\n      modifiedKeys.push(keys[i] as Key);\n    }\n  }\n\n  return modifiedKeys.length ? modifiedKeys : false;\n}\n","import { hasKey } from '../hasKey';\n\n/**\n * Deletes a key, an arrays of keys or all keys from an object.\n * @example\n *\n * const obj = {\n *   \"foo\": true,\n *   \"bar\": false,\n *   \"one\": 2\n * };\n *\n * objFlush(obj, 'foo');\n * =>\n * {\n *   \"bar\": false,\n *   \"one\": 2\n * }\n *\n * objFlush(obj, ['foo', 'bar']);\n * => {\n *   \"one\": 2\n * }\n *\n * objFlush(obj);\n * => {}\n *\n * @param {Object} obj Source object.\n * @param {any|any[]} [keys] The key or an array of keys to remove.\n *\n * @returns {Boolean} Resultant object.\n */\nexport default function objFlush<\n  Type extends Record<any, any>,\n  Key extends keyof Type,\n>(obj: Type, keys?: Key | Key[]): Partial<Type> {\n  if (!keys) {\n    for (var key in obj) {\n      if (hasKey(obj, key)) {\n        delete obj[key];\n      }\n    }\n  } else if (Array.isArray(keys)) {\n    var i = keys.length;\n    while (i--) {\n      if (hasKey(obj, keys[i])) {\n        delete obj[keys[i]];\n      }\n    }\n  } else if (hasKey(obj, keys)) {\n    delete obj[keys];\n  }\n\n  return obj;\n}\n","import { hasKey } from '../hasKey';\n\n/**\n * Pick specific keys from an object.\n * @example\n *\n * const obj = {\n *   \"one\": true,\n *   \"two\": false,\n *   \"foo\": \"bar\"\n * };\n *\n * objPick(obj, ['two', 'foo']);\n *\n * =>\n * {\n *   \"two\": false,\n *   \"foo\": \"bar\"\n * }\n *\n *\n * @typedef {Object} Options\n * @property {Boolean} [upsert=false] Create new properties for missing keys.\n * @property {any} [defaultValue] Default value to use for upsert.\n *\n * @param {Object} obj Source object.\n * @param {any[]} keys Array of keys to objPick.\n * @param {Options} options Object objPick options.\n *\n * @returns {Object} Object with specified keys.\n */\nexport default function objPick<\n  Type extends Record<any, any>,\n  Key extends keyof Type,\n>(\n  obj: Type,\n  keys: Key[] | string[],\n  options?: {\n    defaultValue?: any;\n    upsert?: boolean;\n  },\n): Record<typeof keys[any], typeof obj[keyof typeof obj]> {\n  var defaultValue = (options || {}).defaultValue;\n  var upsert = (options || {}).upsert;\n  var newObj: Record<any, any> = {};\n\n  var i = keys.length;\n  while (i--) {\n    if (hasKey(obj, keys[i])) {\n      newObj[keys[i]] = obj[keys[i]];\n    } else if (upsert) {\n      newObj[keys[i]] = defaultValue || null;\n    }\n  }\n\n  return newObj;\n}\n","import { strTrim } from '../../string';\nimport { hasKey } from '../hasKey';\nimport { objKeys } from '../objKeys';\n\n/**\n * Sanitize an object.\n * @example\n *\n * objSanitize({\n *   \"1\": null,\n *   \"2\": \"two\",\n *   \"3\": undefined\n * });\n *\n * =>\n * {\n *   \"2\": \"two\"\n * }\n *\n * objSanitize({\n *   \"foo\": 1,\n *   \"bar\": \"one\"\n * }, {\n *   validate: (value) => typeof value !== 'string',\n * });\n *\n * =>\n * {\n *   \"foo\": 1\n * }\n *\n * @typedef {Object} Options\n * @property {Function} [validate] Custom validator function.\n * @property {Boolean} [preserveOriginal=false] Preserve the original object.\n * @property {Boolean} [removeEmptyStrings=false] Remove empty strings.\n * @property {Boolean} [removeEmptyObjects=false] Remove empty nested objects.\n *\n * @param {Object} obj Source object.\n * @param {Options} [options] Object sanitize options.\n *\n * @returns {Object} Sanitized object.\n */\nexport default function objSanitize<Type extends Record<any, any>>(\n  obj: Type,\n  options?: {\n    preserveOriginal?: boolean;\n    removeEmptyObjects?: boolean;\n    removeEmptyStrings?: boolean;\n    validate?: (value: typeof obj[keyof typeof obj]) => boolean;\n  },\n): Partial<Type> {\n  var preserveOriginal = (options || {}).preserveOriginal;\n  var removeEmptyObjects = (options || {}).removeEmptyObjects;\n  var removeEmptyStrings = (options || {}).removeEmptyStrings;\n  var validate = (options || {}).validate;\n  var objToModify: Type = obj;\n\n  function recurse(object: Record<any, any>): any {\n    for (var key in object) {\n      if (!hasKey(object, key)) continue;\n\n      var isInvalid = validate ? !validate(object[key]) : false;\n\n      var isEmptyObject =\n        removeEmptyObjects &&\n        object[key] &&\n        typeof object[key] === 'object' &&\n        objKeys(object[key]).length === 0;\n\n      var isEmptyStr =\n        removeEmptyStrings &&\n        typeof object[key] === 'string' &&\n        !strTrim(object[key]);\n\n      if (\n        object[key] === null ||\n        object[key] === undefined ||\n        isEmptyStr ||\n        isEmptyObject ||\n        isInvalid\n      ) {\n        delete object[key];\n      } else if (typeof object[key] === 'object') {\n        recurse(object[key]);\n      }\n    }\n  }\n\n  recurse(preserveOriginal ? objToModify : obj);\n\n  return preserveOriginal ? objToModify : obj;\n}\n","import { objKeys } from '../objKeys';\n\n/**\n * Sorts the keys of an object alphabetically.\n * @example\n *\n * const obj = {\n *   \"c\": 1,\n *   \"a\": 2,\n *   \"b\": 3\n * };\n *\n * const newObj = objSort(obj);\n * console.log(newObj);\n * =>\n * {\n *   \"a\": 2,\n *   \"b\": 3,\n *   \"c\": 1\n * }\n *\n * @typedef {Object} Options\n * @property {Boolean} [reverse=false] Reverse the sort order.\n *\n * @param {Object} obj Source object.\n * @param {Options} [options] Object sort options.\n *\n * @returns {Object} Object with sorted keys.\n */\nexport default function objSort<Type extends Record<any, any>>(\n  obj: Type,\n  options?: {\n    reverse?: boolean;\n  },\n): Type {\n  var reverse = (options || {}).reverse;\n  var newObj: Type = obj;\n  var keys = objKeys(obj);\n\n  if (reverse) {\n    keys.reverse();\n  } else {\n    keys.sort();\n  }\n\n  var i = keys.length;\n  while (i--) {\n    newObj[keys[i]] = obj[keys[i]];\n  }\n\n  return newObj;\n}\n","import { hasKey } from '../hasKey';\n\n/**\n * Returns an array of values of an object.\n * @example\n *\n * const obj = {\n *   \"foo\": true,\n *   \"bar\": false,\n * };\n *\n * objValues(obj);\n * => [true, false]\n *\n * @param {Object} obj Source object.\n *\n * @returns {Array} Values of the object.\n */\nexport default function objValues<\n  Type extends Record<any, any>,\n  Key extends keyof Type,\n  Value extends Type[Key],\n>(obj: Type): Value[] {\n  var values: Value[] = [];\n\n  for (var key in obj) {\n    if (hasKey(obj, key)) {\n      values.push(obj[key]);\n    }\n  }\n\n  return values;\n}\n","import { arrMap } from '../../array';\n\n/**\n * Converts a string to snake_case.\n * @example\n *\n * snakeCase('camelCase');\n *\n * => 'camel_case'\n *\n * @typedef {Object} Options\n * @property {String} [separator=\"_\"] Separator.\n *\n * @param {String} input Source string.\n * @param {Options} options Snake case options.\n *\n * @returns {String} Snake cased string.\n */\nexport default function snakeCase(\n  input: string,\n  options?: {\n    separator?: string;\n  },\n): string {\n  var separator = (options || {}).separator;\n  var match = input.match(\n    /[A-Z]{2,}(?=[A-Z][a-z]+\\d*|\\b)|[A-Z]?[a-z]+\\d*|[A-Z]|\\d+/g,\n  );\n\n  return match\n    ? arrMap(match, function (chunk) {\n        return chunk.toLowerCase();\n      }).join(separator || '_')\n    : input;\n}\n","import type { Vector } from '../types';\nimport { vecDot } from '../vecDot';\n\nexport default function vecMag(vec: Vector): number {\n  return Math.sqrt(vecDot(vec, vec));\n}\n"],"names":["arrFilter","arr","func","thisArg","obj","Object","len","length","res","i","val","call","push","arrIndex","element","from","fromIndex","Number","Math","ceil","floor","arrDiff","relArr","arrMap","array","arrReduce","cb","initialVal","accumulator","undefined","vecDot","vec","relVec","_","index","previousValue","currentValue","hasKey","keys","hasKeys","Array","isArray","prototype","hasOwnProperty","objKeys","key","objEqual","relObj","objKey","relObjKey","strTrim","input","replace","elem","splice","concat","min","value","max","modifiedKeys","options","defaultValue","upsert","newObj","preserveOriginal","removeEmptyObjects","removeEmptyStrings","validate","objToModify","recurse","object","isInvalid","isEmptyObject","isEmptyStr","reverse","sort","values","separator","match","chunk","toLowerCase","join","sqrt"],"mappings":"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"}