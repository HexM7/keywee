{"version":3,"file":"index.umd.min.js","sources":["../src/object/pick/pick.ts","../src/object/sanitize/sanitize.ts"],"sourcesContent":["/**\n * Pick specific keys from an object.\n * @example\n * ```ts\n * const obj = {\n *   \"one\": true,\n *   \"two\": false,\n *   \"foo\": \"bar\"\n * };\n *\n * objPick(obj, ['two', 'foo']);\n *\n * =>\n * {\n *   \"two\": false,\n *   \"foo\": \"bar\"\n * }\n * ```\n *\n * @typedef {Object} Options\n * @property {Boolean} [upsert=false] Create new properties for missing keys.\n * @property {any} [defaultValue] Default value to use for upsert.\n *\n * @param {Object} obj Source object.\n * @param {any[]} keys Array of keys to pick.\n * @param {Options} options Object pick options.\n *\n * @returns {Object} Object with specified keys.\n */\nconst objPick = <Type extends Record<any, any>, Key extends keyof Type>(\n  obj: Type,\n  keys: Key[] | string[],\n  options?: {\n    upsert?: boolean;\n    defaultValue?: any;\n  },\n): Record<typeof keys[any], typeof obj[keyof typeof obj]> => {\n  const { upsert, defaultValue } = options || {};\n  const newObj: Record<any, any> = {};\n\n  keys.forEach((key) => {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      newObj[key] = obj[key];\n    } else if (upsert) {\n      newObj[key] = defaultValue || null;\n    }\n  });\n\n  return newObj;\n};\n\nexport default objPick;\n","/**\n * Sanitize an object.\n * @example\n * ```ts\n * objSanitize({\n *   \"1\": null,\n *   \"2\": \"two\",\n *   \"3\": undefined\n * });\n *\n * =>\n * {\n *   \"2\": \"two\"\n * }\n *\n * objSanitize({\n *   \"foo\": 1,\n *   \"bar\": \"one\"\n * }, {\n *   validate: (value) => typeof value !== 'string',\n * });\n *\n * =>\n * {\n *   \"foo\": 1\n * }\n * ```\n *\n * @typedef {Object} Options\n * @property {Function} [validate] Custom validator function.\n * @property {Boolean} [preserveOriginal=false] Preserve the original object.\n * @property {Boolean} [removeEmptyStrings=false] Remove empty strings.\n * @property {Boolean} [removeEmptyObjects=false] Remove empty nested objects.\n *\n * @param {Object} obj Source object.\n * @param {Options} [options] Object sanitize options.\n *\n * @returns {Object} Sanitized object.\n */\n\nconst objSanitize = <Type extends Record<any, any>>(\n  obj: Type,\n  options?: {\n    validate?: (value: typeof obj[keyof typeof obj]) => boolean;\n    preserveOriginal?: boolean;\n    removeEmptyStrings?: boolean;\n    removeEmptyObjects?: boolean;\n  },\n): Partial<Type> => {\n  const { validate, preserveOriginal, removeEmptyStrings, removeEmptyObjects } =\n    options || {};\n  const objToModify: Type = obj;\n\n  const recurse = (object: Record<any, any>): any => {\n    for (const key in object) {\n      const isInvalid = validate ? !validate(object[key]) : false;\n\n      const isEmptyObject =\n        removeEmptyObjects &&\n        object[key] &&\n        typeof object[key] === 'object' &&\n        Object.keys(object[key]).length === 0;\n\n      const isEmptyStr =\n        removeEmptyStrings &&\n        typeof object[key] === 'string' &&\n        !object[key].trim();\n\n      if (\n        object[key] === null ||\n        object[key] === undefined ||\n        isEmptyStr ||\n        isEmptyObject ||\n        isInvalid\n      ) {\n        delete object[key];\n      } else if (typeof object[key] === 'object') {\n        recurse(object[key]);\n      }\n    }\n  };\n\n  recurse(preserveOriginal ? objToModify : obj);\n\n  return preserveOriginal ? objToModify : obj;\n};\n\nexport default objSanitize;\n"],"names":["obj","keys","options","_a","upsert","defaultValue","newObj","forEach","key","Object","prototype","hasOwnProperty","call","validate","preserveOriginal","removeEmptyStrings","removeEmptyObjects","objToModify","recurse","object","isInvalid","isEmptyObject","length","isEmptyStr","trim","undefined"],"mappings":";;;;;wPA6BgB,SACdA,EACAC,EACAC,GAKM,IAAAC,EAA2BD,GAAW,CAAA,EAApCE,EAAMD,EAAAC,OAAEC,EAAYF,EAAAE,aACtBC,EAA2B,CAAA,EAUjC,OARAL,EAAKM,SAAQ,SAACC,GACRC,OAAOC,UAAUC,eAAeC,KAAKZ,EAAKQ,GAC5CF,EAAOE,GAAOR,EAAIQ,GACTJ,IACTE,EAAOE,GAAOH,GAAgB,KAElC,IAEOC,CACT,gBCToB,SAClBN,EACAE,GAOM,IAAAC,EACJD,GAAW,CAAA,EADLW,EAAQV,EAAAU,SAAEC,EAAgBX,EAAAW,iBAAEC,EAAkBZ,EAAAY,mBAAEC,uBAElDC,EAAoBjB,EAEpBkB,EAAU,SAACC,GACf,IAAK,IAAMX,KAAOW,EAAQ,CACxB,IAAMC,IAAYP,IAAYA,EAASM,EAAOX,IAExCa,EACJL,GACAG,EAAOX,IACgB,iBAAhBW,EAAOX,IACsB,IAApCC,OAAOR,KAAKkB,EAAOX,IAAMc,OAErBC,EACJR,GACuB,iBAAhBI,EAAOX,KACbW,EAAOX,GAAKgB,OAGG,OAAhBL,EAAOX,SACSiB,IAAhBN,EAAOX,IACPe,GACAF,GACAD,SAEOD,EAAOX,GACkB,iBAAhBW,EAAOX,IACvBU,EAAQC,EAAOX,GAElB,CACH,EAIA,OAFAU,EAAQJ,EAAmBG,EAAcjB,GAElCc,EAAmBG,EAAcjB,CAC1C"}