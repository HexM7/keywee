{"version":3,"file":"index.umd.min.js","sources":["../src/array/arrEject/arrEject.ts","../src/math/vecDot/vecDot.ts","../src/number/numAbbr/numAbbr.ts","../src/number/numOrd/numOrd.ts","../src/object/hasKey/hasKey.ts","../src/object/objEqual/objEqual.ts","../src/array/arrCross/arrCross.ts","../src/array/arrDiff/arrDiff.ts","../src/array/arrProd/arrProd.ts","../src/array/arrSum/arrSum.ts","../src/array/arrUnion/arrUnion.ts","../src/math/clamp/clamp.ts","../src/object/objDiff/objDiff.ts","../src/object/objFlush/objFlush.ts","../src/object/objPick/objPick.ts","../src/string/snakeCase/snakeCase.ts","../src/math/vecMag/vecMag.ts"],"sourcesContent":["type ArrayElement<ArrayType extends unknown[]> = ArrayType[number];\n\nconst ejectElement = (element: unknown, array: unknown[]): void => {\n  const index = array.indexOf(element);\n\n  if (index > -1) {\n    array.splice(index, 1);\n  }\n};\n\n/**\n * Removes one or more elements from an array\n *\n * @example\n * arrEject([1, 2, 3, 4], 2);\n * => [1, 3, 4]\n *\n * @param a - An array\n * @param elements - A single element or an array of elements to eject\n * @param mutate - Whether to mutate the original array\n */\nexport const arrEject = <Type extends unknown[]>(\n  a: unknown[],\n  elements: ArrayElement<Type> | ArrayElement<Type>[],\n  mutate = true,\n): Type => {\n  const operand = mutate ? a : [...a];\n\n  if (Array.isArray(elements)) {\n    for (const element of elements) {\n      ejectElement(element, operand);\n    }\n  } else {\n    ejectElement(elements, operand);\n  }\n\n  return operand as Type;\n};\n","import type { Vector } from '../types';\n\n/**\n * Returns the dot product of two vectors\n *\n * @example\n * vecDot([1, 2], [3, 4]);\n * => 11\n *\n * @param a - First vector\n * @param b - Second vector\n */\nexport const vecDot = (a: Vector, b: Vector): number =>\n  a\n    .map((_, index) => (a[index] || 0) * (b[index] || 0))\n    .reduce((previousValue, currentValue) => previousValue + currentValue);\n","export const defaultAbbreviations = ['', 'k', 'M', 'B', 'T', 'P', 'E'] as const;\n\n/**\n * Abbreviates a number\n *\n * @example\n * numAbbr(1e3);\n * => 1k\n *\n * @param a - A number\n * @param suppliedAbbreviations - Optional custom abbreviations\n */\nexport const numAbbr = (\n  a: number,\n  suppliedAbbreviations?: string[],\n): string => {\n  const abbreviations = suppliedAbbreviations || defaultAbbreviations;\n  const positive = Math.sign(a) >= 0;\n\n  a = Math.abs(a);\n\n  const level = (Math.log10(a) / 3) | 0;\n\n  if (level == 0) {\n    return `${!positive ? '-' : ''}${a}`;\n  }\n\n  const abbreviation = abbreviations[level];\n\n  if (!abbreviation) {\n    throw new RangeError('Number out of range');\n  }\n\n  const result = String(Number((a / Math.pow(10, level * 3)).toFixed(1)));\n\n  return `${!positive ? '-' : ''}${result}${abbreviation}`;\n};\n","export const defaultOrdinals = ['th', 'st', 'nd', 'rd'] as const;\n\n/**\n * Suffixes an ordinal to a number\n *\n * @example\n * numOrd(10);\n * => 10th\n *\n * @param a - A number\n * @param suppliedOrdinals - Optional custom ordinals\n * @see https://gist.github.com/jlbruno/1535691/db35b4f3af3dcbb42babc01541410f291a8e8fac\n */\nexport const numOrd = (a: number, suppliedOrdinals?: string[]): string => {\n  const ordinals = suppliedOrdinals || defaultOrdinals;\n  const index = a % 100;\n\n  return (\n    a + (ordinals[(index - 20) % 10] || ordinals[index] || ordinals[0] || '')\n  );\n};\n","/**\n * Checks if a key or an array of keys exists on an object\n *\n * @example\n * const obj = {\n *   \"foo\": true,\n *   \"bar\": false\n * };\n *\n * hasKey(obj, 'foo');\n * => true\n *\n * hasKey(obj, ['foo', 'bar']);\n * => true\n *\n * @param a - An object\n * @param keys - The keys to check\n */\nexport const hasKey = <\n  Type extends Record<string | number | symbol, unknown>,\n  Key extends keyof Type,\n>(\n  a: Type,\n  keys: Key | Key[],\n): boolean => {\n  let hasKeys = true;\n\n  if (Array.isArray(keys)) {\n    let i = keys.length;\n\n    while (i--) {\n      if (!hasKey(a, keys[i] as Key)) {\n        hasKeys = false;\n        break;\n      }\n    }\n  } else {\n    if (!Object.prototype.hasOwnProperty.call(a, keys)) {\n      hasKeys = false;\n    }\n  }\n\n  return hasKeys;\n};\n","// TODO: Implement deep comparison\n\n/**\n * Compares two objects for equality\n *\n * @example\n * objEqual({ foo: 1, bar: 2 }, { foo: 1, bar: 2 });\n * => true\n *\n * objEqual({ foo: 1, bar: 2 }, { foo: 1, bar: false });\n * => false\n *\n * @param a - First object\n * @param b - Second object\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const objEqual = <Type extends Record<string | number | symbol, any>>(\n  a: Type,\n  b: Type,\n): boolean => {\n  if (typeof a == 'object' && a != null && typeof b == 'object' && b != null) {\n    if (Object.keys(a).length - Object.keys(b).length !== 0) {\n      return false;\n    }\n\n    for (const objKey in a) {\n      if (!(objKey in b) || !objEqual(a[objKey], b[objKey])) {\n        return false;\n      }\n    }\n\n    for (const relObjKey in b) {\n      if (!(relObjKey in a) || !objEqual(b[relObjKey], a[relObjKey])) {\n        return false;\n      }\n    }\n\n    return true;\n  } else {\n    return a === b;\n  }\n};\n","/**\n * Returns the common elements from two arrays\n *\n * @example\n * arrCross([1, 2, 3, 4], [2, 3]);\n * => [2, 3]\n *\n * @param a - First array\n * @param b - Second array\n */\nexport const arrCross = <Type extends unknown[]>(\n  a: unknown[],\n  b: unknown[],\n): Type => a.filter((element) => b.indexOf(element) !== -1) as Type;\n","/**\n * Returns elements from the first array that are not present in the second array\n *\n * @example\n * arrDiff([1, 2, 3, 4], [2, 3]);\n * => [1, 4]\n *\n * @param a - First array\n * @param b - Second array\n */\nexport const arrDiff = <Type extends unknown[]>(\n  a: unknown[],\n  b: unknown[],\n): Type => a.filter((element) => b.indexOf(element) === -1) as unknown as Type;\n","/**\n * Returns the product of elements of an array\n *\n * @example\n * arrProd([2, 4, 8]);\n * => 64\n *\n * @param a - A numeric array\n */\nexport const arrProd = (a: number[]): number =>\n  a.reduce((previousValue, currentValue) => previousValue * currentValue, 1);\n","/**\n * Returns the sum of elements of an array\n *\n * @example\n * arrSum([1, 2, 3]);\n * => 6\n *\n * @param a - A numeric array\n */\nexport const arrSum = (a: number[]): number =>\n  a.reduce((previousValue, currentValue) => previousValue + currentValue, 0);\n","/**\n * Returns a unique union of elements of two arrays\n *\n * @example\n * arrUnion([1, 2, 3, 4, 5], [1, 3, 5, 7]);\n * => [1, 2, 3, 4, 5, 7]\n *\n * @param a - First array\n * @param b - Second array\n */\nexport const arrUnion = <Type extends unknown[]>(\n  a: unknown[],\n  b: unknown[],\n): Type => [...new Set([...a, ...b])] as Type;\n","/**\n * Clamps a number to bounds\n *\n * @example\n * clamp(0, 64, 32);\n * => 32\n *\n * @param min - The lower bound\n * @param value - Un-clamped value\n * @param max - The upper bound\n */\nexport const clamp = (min: number, value: number, max: number): number =>\n  Math.min(Math.max(value, min), max);\n","import { hasKey } from '../hasKey';\nimport { objEqual } from '../objEqual';\n\n/**\n * Returns an array of identical keys with different values across two objects\n *\n * @example\n * objDiff({ foo: 1, bar: 2 }, { foo: true, bar: 2 });\n * => ['foo']\n *\n * objDiff({ foo: 1, bar: 2 }, { foo: 1, bar: 2 });\n * => false\n *\n * @param a - First object\n * @param b - Second object\n */\nexport const objDiff = <\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Type extends Record<string | number | symbol, any>,\n  Key extends keyof Type,\n>(\n  a: Type,\n  b: Type,\n): Key[] | false => {\n  if (objEqual(a, b)) {\n    return false;\n  }\n\n  const modifiedKeys: Key[] = [];\n  const keys = Object.keys(a);\n  let i = keys.length;\n\n  while (i--) {\n    if (\n      hasKey(b, keys[i] as Key) &&\n      !objEqual(a[keys[i] as Key], b[keys[i] as Key])\n    ) {\n      modifiedKeys.push(keys[i] as Key);\n    }\n  }\n\n  return modifiedKeys.length ? modifiedKeys : false;\n};\n","import { hasKey } from '../hasKey';\n\n/**\n * Deletes a single key or multiple keys from an object\n *\n * @example\n * const obj = {\n *   \"foo\": true,\n *   \"bar\": false,\n *   \"one\": 2\n * };\n *\n * objFlush(obj, 'foo');\n * =>\n * {\n *   \"bar\": false,\n *   \"one\": 2\n * }\n *\n * objFlush(obj, ['foo', 'bar']);\n * => {\n *   \"one\": 2\n * }\n *\n * objFlush(obj);\n * => {}\n *\n * @param a - An object\n * @param keys - The key or an array of keys to remove.\n */\nexport const objFlush = <\n  Type extends Record<string | number | symbol, unknown>,\n  Key extends keyof Type,\n>(\n  a: Type,\n  keys?: Key | Key[],\n): Partial<Type> => {\n  if (!keys) {\n    for (const key in a) {\n      if (hasKey(a, key)) {\n        delete a[key];\n      }\n    }\n  } else if (Array.isArray(keys)) {\n    let i = keys.length;\n\n    while (i--) {\n      if (hasKey(a, keys[i] as Key)) {\n        delete a[keys[i] as Key];\n      }\n    }\n  } else if (hasKey(a, keys)) {\n    delete a[keys];\n  }\n\n  return a;\n};\n","import { hasKey } from '../hasKey';\n\n/**\n * Returns a new object with the specified keys from a source object\n *\n * @example\n * const obj = {\n *   \"one\": true,\n *   \"two\": false,\n *   \"foo\": \"bar\"\n * };\n *\n * const newObj = objPick(obj, ['two', 'foo']);\n * =>\n * {\n *   \"two\": false,\n *   \"foo\": \"bar\"\n * }\n *\n * @param a - An object\n * @param keys - An array of keys to pick\n * @param options - Optional options\n * @param options.upsert - Whether to create new properties for missing keys\n * @param options.defaultValue - Default value to use when upsert-ing\n */\nexport const objPick = <\n  Type extends Record<string | number | symbol, unknown>,\n  Key extends keyof Type,\n>(\n  a: Type,\n  keys: Key[] | string[],\n  options?: {\n    defaultValue?: unknown;\n    upsert?: boolean;\n  },\n): Record<typeof keys[number], typeof a[keyof typeof a]> => {\n  const { defaultValue, upsert } = options || {};\n  const newObj: Record<string | number | symbol, unknown> = {};\n  let i = keys.length;\n\n  while (i--) {\n    if (hasKey(a, keys[i] as Key)) {\n      newObj[keys[i] as Key] = a[keys[i] as Key];\n    } else if (upsert) {\n      newObj[keys[i] as Key] = defaultValue || null;\n    }\n  }\n\n  return newObj as Record<typeof keys[number], typeof a[keyof typeof a]>;\n};\n","/**\n * Converts a string to snake_case\n *\n * @example\n * snakeCase('camelCase');\n * => 'camel_case'\n *\n * @param a - A string\n * @param separator - An optional separator to use instead of underscore\n */\nexport const snakeCase = (a: string, separator?: string): string => {\n  const matches = a.match(\n    /[A-Z]{2,}(?=[A-Z][a-z]+\\d*|\\b)|[A-Z]?[a-z]+\\d*|[A-Z]|\\d+/g,\n  );\n\n  return matches\n    ? matches.map((chunk) => chunk.toLowerCase()).join(separator || '_')\n    : a;\n};\n","import type { Vector } from '../types';\nimport { vecDot } from '../vecDot';\n\n/**\n * Returns the magnitude of a vector\n *\n * @example\n * vecMag([3, 4]);\n * => 5\n *\n * @param a - A vector\n */\nexport const vecMag = (a: Vector): number => Math.sqrt(vecDot(a, a));\n"],"names":["ejectElement","element","array","index","indexOf","splice","vecDot","a","b","map","_","reduce","previousValue","currentValue","defaultAbbreviations","defaultOrdinals","hasKey","keys","hasKeys","Array","isArray","i","length","Object","prototype","hasOwnProperty","call","objEqual","objKey","relObjKey","filter","elements","mutate","operand","__spreadArray","__read","elements_1","__values","elements_1_1","done","next","value","Set","min","max","Math","suppliedAbbreviations","abbreviations","positive","sign","abs","level","log10","concat","abbreviation","RangeError","result","String","Number","pow","toFixed","suppliedOrdinals","ordinals","modifiedKeys","push","key","options","_a","defaultValue","upsert","newObj","separator","matches","match","chunk","toLowerCase","join","sqrt"],"mappings":"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"}