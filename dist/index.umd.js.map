{"version":3,"file":"index.umd.js","sources":["../src/array/arrCross/arrCross.ts","../src/array/arrDiff/arrDiff.ts","../src/array/arrEject/arrEject.ts","../src/array/arrProd/arrProd.ts","../src/array/arrSum/arrSum.ts","../src/array/arrUnion/arrUnion.ts","../src/math/clamp/clamp.ts","../src/math/vecDot/vecDot.ts","../src/math/vecMag/vecMag.ts","../src/number/numAbbr/numAbbr.ts","../src/number/numOrd/numOrd.ts","../src/object/hasKey/hasKey.ts","../src/object/objEqual/objEqual.ts","../src/object/objDiff/objDiff.ts","../src/object/objFlush/objFlush.ts","../src/object/objPick/objPick.ts","../src/string/snakeCase/snakeCase.ts"],"sourcesContent":["/**\n * Returns the common elements from two arrays\n *\n * @example\n * arrCross([1, 2, 3, 4], [2, 3]);\n * => [2, 3]\n *\n * @param a - First array\n * @param b - Second array\n */\nexport const arrCross = <Type extends unknown[]>(\n  a: unknown[],\n  b: unknown[],\n): Type => a.filter((element) => b.indexOf(element) !== -1) as Type;\n","/**\n * Returns elements from the first array that are not present in the second array\n *\n * @example\n * arrDiff([1, 2, 3, 4], [2, 3]);\n * => [1, 4]\n *\n * @param a - First array\n * @param b - Second array\n */\nexport const arrDiff = <Type extends unknown[]>(\n  a: unknown[],\n  b: unknown[],\n): Type => a.filter((element) => b.indexOf(element) === -1) as unknown as Type;\n","type ArrayElement<ArrayType extends unknown[]> = ArrayType[number];\n\nconst ejectElement = (element: unknown, array: unknown[]): void => {\n  const index = array.indexOf(element);\n\n  if (index > -1) {\n    array.splice(index, 1);\n  }\n};\n\n/**\n * Removes one or more elements from an array\n *\n * @example\n * arrEject([1, 2, 3, 4], 2);\n * => [1, 3, 4]\n *\n * @param a - An array\n * @param elements - A single element or an array of elements to eject\n * @param mutate - Whether to mutate the original array\n */\nexport const arrEject = <Type extends unknown[]>(\n  a: unknown[],\n  elements: ArrayElement<Type> | ArrayElement<Type>[],\n  mutate = true,\n): Type => {\n  const operand = mutate ? a : [...a];\n\n  if (Array.isArray(elements)) {\n    for (const element of elements) {\n      ejectElement(element, operand);\n    }\n  } else {\n    ejectElement(elements, operand);\n  }\n\n  return operand as Type;\n};\n","/**\n * Returns the product of elements of an array\n *\n * @example\n * arrProd([2, 4, 8]);\n * => 64\n *\n * @param a - A numeric array\n */\nexport const arrProd = (a: number[]): number =>\n  a.reduce((previousValue, currentValue) => previousValue * currentValue, 1);\n","/**\n * Returns the sum of elements of an array\n *\n * @example\n * arrSum([1, 2, 3]);\n * => 6\n *\n * @param a - A numeric array\n */\nexport const arrSum = (a: number[]): number =>\n  a.reduce((previousValue, currentValue) => previousValue + currentValue, 0);\n","/**\n * Returns a unique union of elements of two arrays\n *\n * @example\n * arrUnion([1, 2, 3, 4, 5], [1, 3, 5, 7]);\n * => [1, 2, 3, 4, 5, 7]\n *\n * @param a - First array\n * @param b - Second array\n */\nexport const arrUnion = <Type extends unknown[]>(\n  a: unknown[],\n  b: unknown[],\n): Type => [...new Set([...a, ...b])] as Type;\n","/**\n * Clamps a number to bounds\n *\n * @example\n * clamp(0, 64, 32);\n * => 32\n *\n * @param min - The lower bound\n * @param value - Un-clamped value\n * @param max - The upper bound\n */\nexport const clamp = (min: number, value: number, max: number): number =>\n  Math.min(Math.max(value, min), max);\n","import type { Vector } from '../types';\n\n/**\n * Returns the dot product of two vectors\n *\n * @example\n * vecDot([1, 2], [3, 4]);\n * => 11\n *\n * @param a - First vector\n * @param b - Second vector\n */\nexport const vecDot = (a: Vector, b: Vector): number =>\n  a\n    .map((_, index) => (a[index] || 0) * (b[index] || 0))\n    .reduce((previousValue, currentValue) => previousValue + currentValue);\n","import type { Vector } from '../types';\nimport { vecDot } from '../vecDot';\n\n/**\n * Returns the magnitude of a vector\n *\n * @example\n * vecMag([3, 4]);\n * => 5\n *\n * @param a - A vector\n */\nexport const vecMag = (a: Vector): number => Math.sqrt(vecDot(a, a));\n","export const defaultAbbreviations = ['', 'k', 'M', 'B', 'T', 'P', 'E'] as const;\n\n/**\n * Abbreviates a number\n *\n * @example\n * numAbbr(1e3);\n * => \"1k\"\n *\n * @param a - A number\n * @param suppliedAbbreviations - Optional custom abbreviations\n */\nexport const numAbbr = (\n  a: number,\n  suppliedAbbreviations?: string[],\n): string => {\n  const abbreviations = suppliedAbbreviations || defaultAbbreviations;\n  const positive = Math.sign(a) >= 0;\n\n  a = Math.abs(a);\n\n  const level = (Math.log10(a) / 3) | 0;\n\n  if (level == 0) {\n    return `${!positive ? '-' : ''}${a}`;\n  }\n\n  const abbreviation = abbreviations[level];\n\n  if (!abbreviation) {\n    throw new RangeError('Number out of range');\n  }\n\n  const result = String(Number((a / Math.pow(10, level * 3)).toFixed(1)));\n\n  return `${!positive ? '-' : ''}${result}${abbreviation}`;\n};\n","export const defaultOrdinals = ['th', 'st', 'nd', 'rd'] as const;\n\n/**\n * Suffixes an ordinal to a number\n *\n * @example\n * numOrd(10);\n * => \"10th\"\n *\n * @param a - A number\n * @param suppliedOrdinals - Optional custom ordinals\n * @see https://gist.github.com/jlbruno/1535691/db35b4f3af3dcbb42babc01541410f291a8e8fac\n */\nexport const numOrd = (a: number, suppliedOrdinals?: string[]): string => {\n  const ordinals = suppliedOrdinals || defaultOrdinals;\n  const index = a % 100;\n\n  return (\n    a + (ordinals[(index - 20) % 10] || ordinals[index] || ordinals[0] || '')\n  );\n};\n","/**\n * Checks if a key or an array of keys exists on an object\n *\n * @example\n * const obj = {\n *   \"foo\": true,\n *   \"bar\": false\n * };\n *\n * hasKey(obj, 'foo');\n * => true\n *\n * hasKey(obj, ['foo', 'bar']);\n * => true\n *\n * @param a - An object\n * @param keys - The keys to check\n */\nexport const hasKey = <\n  Type extends Record<string | number | symbol, unknown>,\n  Key extends keyof Type,\n>(\n  a: Type,\n  keys: Key | Key[],\n): boolean => {\n  let hasKeys = true;\n\n  if (Array.isArray(keys)) {\n    let i = keys.length;\n\n    while (i--) {\n      if (!hasKey(a, keys[i] as Key)) {\n        hasKeys = false;\n        break;\n      }\n    }\n  } else {\n    if (!Object.prototype.hasOwnProperty.call(a, keys)) {\n      hasKeys = false;\n    }\n  }\n\n  return hasKeys;\n};\n","// TODO: Implement deep comparison\n\n/**\n * Compares two objects for equality\n *\n * @example\n * objEqual({ foo: 1, bar: 2 }, { foo: 1, bar: 2 });\n * => true\n *\n * objEqual({ foo: 1, bar: 2 }, { foo: 1, bar: false });\n * => false\n *\n * @param a - First object\n * @param b - Second object\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const objEqual = <Type extends Record<string | number | symbol, any>>(\n  a: Type,\n  b: Type,\n): boolean => {\n  if (typeof a == 'object' && a != null && typeof b == 'object' && b != null) {\n    if (Object.keys(a).length - Object.keys(b).length !== 0) {\n      return false;\n    }\n\n    for (const objKey in a) {\n      if (!(objKey in b) || !objEqual(a[objKey], b[objKey])) {\n        return false;\n      }\n    }\n\n    for (const relObjKey in b) {\n      if (!(relObjKey in a) || !objEqual(b[relObjKey], a[relObjKey])) {\n        return false;\n      }\n    }\n\n    return true;\n  } else {\n    return a === b;\n  }\n};\n","import { hasKey } from '../hasKey';\nimport { objEqual } from '../objEqual';\n\n/**\n * Returns an array of identical keys with different values across two objects\n *\n * @example\n * objDiff({ foo: 1, bar: 2 }, { foo: true, bar: 2 });\n * => ['foo']\n *\n * objDiff({ foo: 1, bar: 2 }, { foo: 1, bar: 2 });\n * => false\n *\n * @param a - First object\n * @param b - Second object\n */\nexport const objDiff = <\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Type extends Record<string | number | symbol, any>,\n  Key extends keyof Type,\n>(\n  a: Type,\n  b: Type,\n): Key[] | false => {\n  if (objEqual(a, b)) {\n    return false;\n  }\n\n  const modifiedKeys: Key[] = [];\n  const keys = Object.keys(a);\n  let i = keys.length;\n\n  while (i--) {\n    if (\n      hasKey(b, keys[i] as Key) &&\n      !objEqual(a[keys[i] as Key], b[keys[i] as Key])\n    ) {\n      modifiedKeys.push(keys[i] as Key);\n    }\n  }\n\n  return modifiedKeys.length ? modifiedKeys : false;\n};\n","import { hasKey } from '../hasKey';\n\n/**\n * Deletes a single key or multiple keys from an object\n *\n * @example\n * const obj = {\n *   \"foo\": true,\n *   \"bar\": false,\n *   \"one\": 2\n * };\n *\n * objFlush(obj, 'foo');\n * =>\n * {\n *   \"bar\": false,\n *   \"one\": 2\n * }\n *\n * objFlush(obj, ['foo', 'bar']);\n * => {\n *   \"one\": 2\n * }\n *\n * objFlush(obj);\n * => {}\n *\n * @param a - An object\n * @param keys - The key or an array of keys to remove.\n */\nexport const objFlush = <\n  Type extends Record<string | number | symbol, unknown>,\n  Key extends keyof Type,\n>(\n  a: Type,\n  keys?: Key | Key[],\n): Partial<Type> => {\n  if (!keys) {\n    for (const key in a) {\n      if (hasKey(a, key)) {\n        delete a[key];\n      }\n    }\n  } else if (Array.isArray(keys)) {\n    let i = keys.length;\n\n    while (i--) {\n      if (hasKey(a, keys[i] as Key)) {\n        delete a[keys[i] as Key];\n      }\n    }\n  } else if (hasKey(a, keys)) {\n    delete a[keys];\n  }\n\n  return a;\n};\n","import { hasKey } from '../hasKey';\n\n/**\n * Returns a new object with the specified keys from a source object\n *\n * @example\n * const obj = {\n *   \"one\": true,\n *   \"two\": false,\n *   \"foo\": \"bar\"\n * };\n *\n * const newObj = objPick(obj, ['two', 'foo']);\n * =>\n * {\n *   \"two\": false,\n *   \"foo\": \"bar\"\n * }\n *\n * @param a - An object\n * @param keys - An array of keys to pick\n * @param options - Optional options\n * @param options.upsert - Whether to create new properties for missing keys\n * @param options.defaultValue - Default value to use when upsert-ing\n */\nexport const objPick = <\n  Type extends Record<string | number | symbol, unknown>,\n  Key extends keyof Type,\n>(\n  a: Type,\n  keys: Key[] | string[],\n  options?: {\n    defaultValue?: unknown;\n    upsert?: boolean;\n  },\n): Record<typeof keys[number], typeof a[keyof typeof a]> => {\n  const { defaultValue, upsert } = options || {};\n  const newObj: Record<string | number | symbol, unknown> = {};\n  let i = keys.length;\n\n  while (i--) {\n    if (hasKey(a, keys[i] as Key)) {\n      newObj[keys[i] as Key] = a[keys[i] as Key];\n    } else if (upsert) {\n      newObj[keys[i] as Key] = defaultValue || null;\n    }\n  }\n\n  return newObj as Record<typeof keys[number], typeof a[keyof typeof a]>;\n};\n","/**\n * Converts a string to snake_case\n *\n * @example\n * snakeCase(\"camelCase\");\n * => \"camel_case\"\n *\n * @param a - A string\n * @param separator - An optional separator to use instead of underscore\n */\nexport const snakeCase = (a: string, separator?: string): string => {\n  const matches = a.match(\n    /[A-Z]{2,}(?=[A-Z][a-z]+\\d*|\\b)|[A-Z]?[a-z]+\\d*|[A-Z]|\\d+/g,\n  );\n\n  return matches\n    ? matches.map((chunk) => chunk.toLowerCase()).join(separator || '_')\n    : a;\n};\n"],"names":[],"mappings":"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"}